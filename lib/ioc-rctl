#!/bin/sh

__rctl_limits () {
    local name="$1"
    local failed=0

    if [ -z $name ] ; then
        echo "  ERROR: missing UUID"
        exit 1
    fi

    local dataset=$(__find_jail $name)

    if [ -z $dataset ] ; then
        echo "  ERROR: $name not found"
        exit 1
    fi

    if [ $dataset == "multiple" ] ; then
        echo "  ERROR: multiple matching UUIDs!"
        exit 1
    fi

    local fulluuid="$(__check_name $name)"

    local rlimits="$(__get_jail_prop rlimits $fulluuid)"

    if [ $rlimits == "on" ] ; then
        echo -n "  + Applying resource limits"
        for prop in $CONF_RCTL ; do
            value="$(__get_jail_prop $prop $fulluuid)"
            limit=$(echo $value | awk 'BEGIN { FS = ":" } ; { print $1 }')
            action=$(echo $value | awk 'BEGIN { FS = ":" } ; { print $2 }')

            if [ $limit == "off" ] ; then
                continue
            else
                if [ -z "$limit" ] || [ -z "$action" ] ; then
                    echo -n "  ERROR: incorrect resource limit: $limit action: "
                    echo "$action for property: $prop"
                    echo "  HINT : check man page for syntax."
                else
                    rctl -a jail:ioc-${fulluuid}:${prop}:${action}=${limit}
                    if [ $? -eq 1 ] ; then
                        echo "    FAILED to apply ${prop}=${action}:${limit}"
                        failed=1
                    fi
                fi
            fi
        done
        if [ $failed -ne 1 ] ; then
            echo " OK"
        fi
    fi
}

__rctl_list () {
    local name="$1"

    if [ -z "$name" ] ; then
        echo "* All active limits:"
        rctl | grep jail
    else
        local fulluuid="$(__check_name $name)"
        local jid="$(jls -j ioc-${fulluuid} jid)"
        local limits="$(rctl -h | grep $fulluuid)"

        echo "* Active limits for jail: $fulluuid"

        for i in $limits ; do
            limit=$(echo $i | cut -f 3,4 -d:)
            echo "  - $limit"
        done

        if [ ! -z "$jid" ] ; then
            echo "* CPU set: $(cpuset -g -j $jid | cut -f2 -d:)"
        fi
    fi
}

__rctl_uncap () {
    local name="$1"

    if [ -z $name ] ; then
        echo "  ERROR: missing UUID"
        exit 1
    fi

    local fulluuid="$(__check_name $name)"

    echo "  Releasing resource limits.."
    rctl -r jail:ioc-${fulluuid}
    echo "  Listing active rules for jail:"
    rctl | grep $fulluuid
}


__rctl_inuse () {
    local name="$1"

    if [ -z $name ] ; then
        __rctl_inuse_all
        exit 0
    fi

    local dataset=$(__find_jail $name)

    if [ -z $dataset ] ; then
        echo "  ERROR: $name not found"
        exit 1
    fi

    if [ $dataset == "multiple" ] ; then
        echo "  ERROR: multiple matching UUIDs!"
        exit 1
    fi

    local fulluuid="$(__check_name $name)"

    echo "Consumed resources:"
    echo "-------------------"
    rctl -hu jail:ioc-${fulluuid}
}

__rctl_inuse_all () {
    local _jails _fulluuid _tag _print_head\
          _line _res _jail _header

    _jails="$(__find_jail ALL)"
    _print_head=1

    for _jail in $(echo $_jails) ; do
        _fulluuid="$(zfs get -H -o value org.freebsd.iocage:host_hostuuid $_jail)"
        _tag="$(zfs get -H -o value org.freebsd.iocage:tag $_jail)"
        _resources="$(rctl -hu jail:ioc-${_fulluuid})"
        _state="$(__is_running ${_fulluuid})"

        for _res in $(echo ${_resources}) ; do
            _value="$(echo ${_res}|cut -f2 -d=)"
            _header="$(echo ${_res}|cut -f1 -d=)"
            _line="${_line},${_value}"
        done

        if [ ${_print_head} -eq 1 ] ; then
            echo -n "UUID,TAG,cputime,datasize,stacksize,coredumpsize,memoryuse,"
            echo -n "memorylocked,maxproc,openfiles,vmemoryuse,pseudoterminals,"
            echo -n "swapuse,nthr,msgqqueued,msgqsize,nmsgq,nsem,nsemop,nshm,"
            echo    "shmsize,wallclock,pcpu"
            _print_head=0
        fi

        if [ ${_state} -gt 0 ] ; then
            echo "${_fulluuid},${_tag}${_line}"
        fi

        unset _line
    done
}
