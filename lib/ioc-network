#!/bin/sh

# used for mac address randomization for VNET jails
__get_next_mac () {
    local _mac_base _mac_offset _calc_mac _mac _mac_postfix

    _mac_base=$(echo "${1}" | tr '[a-z]' '[A-Z]')
    _mac_offset=$(echo "obase=16; ${2}" | bc)

    _calc_mac=$(echo "obase=16; ibase=16; ${_mac_base} + ${_mac_offset}" | bc)
    _mac_postfix=$(echo "${_calc_mac}" | awk '{ print substr($0, length($0)-5, length($0)) }')
    _mac="${mac_prefix}${_mac_postfix}"

    echo "${_mac}"
}

# Generate a new set of mac addresses for epair interfaces
__generate_mac () {
    local _mac_offset _dataset _uuid _mac_base _mac_epair_a _mac_epair_b _mac

    _mac_offset=${1}
    _dataset=${2}

    _uuid=$(__get_dataset_ioc_prop host_hostuuid ${_dataset})
    _mac_base=$(echo ${_uuid} | awk '{ print substr($0, 0, 6) }')
    _mac_epair_a=$(__get_next_mac "${_mac_base}" "${_mac_offset}")
    _mac_epair_b=$(__get_next_mac "${_mac_base}" "${_mac_offset}+1")
    _mac=${_mac_epair_a},${_mac_epair_b}

    echo "${_mac}"
}

# Expects input: _nic _mac_offset _epair_leg _uuid
# outputs a single mac address
# Example: __validate_mac ${_nic} ${_mac_offset} a ${_dataset}
__validate_mac () {
    local _nic _mac_offset _epair_leg _dataset _mac _return

    _nic=${1}
    _mac_offset=${2}
    _epair_leg=${3}
    _dataset=${4}

    _mac=$(__get_dataset_ioc_prop ${_nic}_mac ${_dataset})

    if [ "${_mac}" == "none" ] ; then
        _mac=$(__generate_mac ${_mac_offset} ${_dataset})
        __set_dataset_ioc_prop ${_nic}_mac=${_mac} ${_dataset}
    fi

    if [ "${_epair_leg}" == "a" ] ; then
        _return=${_mac%%,*}
    elif [ "${_epair_leg}" == "b" ] ; then
        _return=${_mac#*,}
    fi

    echo "${_return}"
}

# Expects ${1} for action and ${2} for UUID
__networking () {
    local _action _dataset
    
    _action=${1}
    _dataset=${2}

    case "${_action}" in
        start) __start_networking ${_dataset};;
        stop) __stop_networking ${_dataset};;
        *) __fatal_error "__networking: Invalid action \"${_action}\"";;
    esac
}

__start_networking () {
    local _dataset _uuid _jid _ip4 _ip6 _defaultgw _defaultgw6 _nics
    local _mac_offset _i _nic _bridge _memberif _brmtu _epair_a _epair_b
    local _mac_epair_a _mac_epair_b _addrs _iface _ip

    _dataset=${1}

    _uuid=$(__get_dataset_ioc_prop host_hostuuid ${_dataset})
    _jid=$(jls -j ioc-${_uuid} jid)
    _ip4=$(__get_dataset_ioc_prop ip4_addr ${_dataset})
    _ip6=$(__get_dataset_ioc_prop ip6_addr ${_dataset})
    _defaultgw=$(__get_dataset_ioc_prop defaultrouter ${_dataset})
    _defaultgw6=$(__get_dataset_ioc_prop defaultrouter6 ${_dataset})
    _nics=$(__get_dataset_ioc_prop interfaces ${_dataset} | tr ',' ' ')
    _mac_offset=0
    
    for _i in ${_nics} ; do
        _nic=${_i%%:*}
        _bridge=${_i#*:}
        _memberif=$(ifconfig ${_bridge} | awk '/member/ { print $2; exit }')
        _brmtu=$(ifconfig ${_memberif} | awk '{ print $6; exit }')
        _epair_a=$(ifconfig epair create)
        _epair_b="${_epair_a%a}b"
        ifconfig ${_epair_a} name ${_nic}:${_jid} mtu ${_brmtu}
        _mac_epair_a=$(__validate_mac ${_nic} ${_mac_offset} a ${_dataset})
        ifconfig ${_nic}:${_jid} link ${_mac_epair_a}
        ifconfig ${_nic}:${_jid} description "associated with jail: ${_uuid}"
        ifconfig ${_epair_b} vnet ioc-${_uuid}
        jexec ioc-${_uuid} ifconfig ${_epair_b} name ${_nic} mtu ${_brmtu}
        _mac_epair_b=$(__validate_mac ${_nic} ${_mac_offset} b ${_dataset})
        jexec ioc-${_uuid} ifconfig ${_nic} link ${_mac_epair_b}
        ifconfig ${_bridge} addm ${_nic}:${_jid} up
        ifconfig ${_nic}:${_jid} up
        : $((_mac_offset += 2))
    done

    if [ "${_ip4}" != "none" ] ; then
        IFS=','
        _addrs=$(echo ${_ip4})
        unset IFS

        for _i in ${_addrs} ; do
            _iface=${_i%%|*}
            _ip=${_i#*|}
            jexec ioc-${_uuid} ifconfig ${_iface} ${_ip} up
        done
    fi

    if [ "${_ip6}" != "none" ] ; then
        IFS=','
        _addrs=$(echo ${_ip6})
        unset IFS

        for _i in ${_addrs} ; do
            _iface=${_i%%|*}
            _ip=${_i#*|}
            jexec ioc-${_uuid} ifconfig ${_iface} inet6 ${_ip} up
        done
    fi

    if [ "${_defaultgw}" != "none" ] ; then
        jexec ioc-${_uuid} route add default ${_defaultgw} > /dev/null
    fi

    if [ "${_defaultgw6}" != "none" ] ; then
        jexec ioc-${_uuid} route add -6 default ${_defaultgw6} >/dev/null
    fi
}

__stop_networking () {
    local _dataset _uuid _jid _nics _i _nic

    _dataset=${1}
    _uuid=$(__get_dataset_ioc_prop host_hostuuid ${_dataset})
    _jid=$(jls -j ioc-${_uuid} jid)
    _nics=$(__get_dataset_ioc_prop interfaces ${_dataset} | tr ',' ' ')

    for _i in ${_nics} ; do
        _nic=${_i%%:*}
        ifconfig ${_nic}:${_jid} destroy
    done
}

__stop_legacy_networking () {
    local _dataset _ip4_addr _ip6_addr _addrs _ip _iface _ip4 _ip6
    
    _dataset=${1}

    _ip4_addr=$(__get_dataset_ioc_prop ip4_addr ${_dataset})
    _ip6_addr=$(__get_dataset_ioc_prop ip6_addr ${_dataset})

    if [ "${_ip4_addr}" != "none" ] ; then
        IFS=','
        _addrs=$(echo ${_ip4_addr})
        unset IFS

        for _ip in ${_addrs} ; do
            _iface=${_ip%%|*}
            _ip4=${_ip#*|}
            ifconfig ${_iface} ${_ip4%%/*} -alias
        done
    fi

    if [ "${_ip6_addr}" != "none" ] ; then
        IFS=','
        _addrs=$(echo ${_ip6_addr})
        unset IFS

        for _ip in ${_addrs} ; do
            _iface=${_ip%%|*}
            _ip6=${_ip#*|}
            ifconfig ${_iface} inet6 ${_ip6%%/*} -alias
        done
    fi
}
