#!/bin/sh

# activate pool for iocage
# intended for automation tool
__activate () {
    local _pool

    _pool=${1}

    if [ -n "${_pool}" ] ; then
        zpool set comment=iocage ${_pool}
    fi

    exit 0
}

__create_basejail () {
    local _release _fs

    _release=${1}

    echo
    echo -n "Creating basejail ZFS datasets..."

    for _fs in ${bfs_list} ; do
        zfs create -o compression=lz4 -p \
            ${pool}/iocage/base/${_release}/root/${_fs}
    done

    echo " OK"
}

__reclone_basejail () {
    local _dataset _fulluuid _jail_release _fs

    _dataset=${1}
    
    _fulluuid=$(__get_dataset_ioc_prop host_hostuuid ${_dataset})
    _jail_release=$(__get_dataset_ioc_prop release ${_dataset})

    zfs destroy -rRf ${pool}/iocage/base@${_fulluuid}
    zfs snapshot -r  ${pool}/iocage/base@${_fulluuid}

    echo "* ${_fulluuid} is a basejail, re-cloning jail.."

    # Re-clone required filesystems
    for _fs in ${bfs_list} ; do
        # echo "  re-cloning: ${_dataset}/root/${_fs}"
        zfs clone \
            ${pool}/iocage/base/${_jail_release}/root/${_fs}@${_fulluuid} \
            ${_dataset}/root/${_fs}
    done
}

# This creates jails ---------------------------------------------------
__create_jail () {
    local _configured _flag _fs_list _zfsconfig _fs _dir

    { zfs list -r ${pool}/iocage/releases | grep -q ${release} ; } ||
        __fatal_error "Release ${release} not found locally, run fetch first."

    _configured=0
    _flag=${1}

    case "${_flag}" in
        -c)
            _fs_list=$(zfs list -rHo name ${pool}/iocage/releases/${release})
            _zfsconfig=$(__configure_jail generate)

            zfs snapshot -r ${pool}/iocage/releases/${release}@${uuid}

            for _fs in ${_fs_list} ; do
                cfs=$(echo ${_fs} | sed s#/releases/${release}#/jails/${uuid}#g)
                #echo "cloning $fs into $cfs"
                echo "zfs clone ${_zfsconfig} ${_fs}@${uuid} ${_cfs}" | sh
            done
            
            _configured=1
            ;;
        
        -e)
            _zfsconfig=$(__configure_jail generate)

            echo "zfs create -p ${_zfsconfig} ${pool}/iocage/jails/${uuid}" | sh
            zfs create -p ${pool}/iocage/jails/${uuid}/root

            _configured=1
            ;;
        
        -b)
            export type="basejail"
            _zfsconfig=$(__configure_jail generate)

            zfs snapshot -r ${pool}/iocage/base@${uuid}
            echo "zfs create -p ${_zfsconfig} ${pool}/iocage/jails/${uuid}" | sh
            zfs create -o compression=lz4 -p $pool/iocage/jails/$uuid/root/usr

            for _fs in ${bfs_list} ; do
                zfs clone -o compression=lz4 -o readonly=on \
                    ${pool}/iocage/base/${release}/root/${_fs}@${uuid} \
                    ${pool}/iocage/jails/${uuid}/root/${_fs}
            done

            for _dir in ${bdir_list} ; do
                cp -a ${iocroot}/base/${release}/root/${_dir} \
                   ${iocroot}/jails/${uuid}/root/${_dir}
            done
            
            _configured=1
            ;;

        *)
            zfs snapshot -r ${pool}/iocage/releases/${release}@${uuid}
            zfs send     -R ${pool}/iocage/releases/${release}@${uuid} \
            | zfs recv      ${pool}/iocage/jails/${uuid}
            zfs destroy  -r ${pool}/iocage/releases/${release}@${uuid}
            zfs destroy  -r ${pool}/iocage/jails/${uuid}@${uuid}
            ;;
    esac

    if [ ${_configured} -ne 1 ] ; then
        __configure_jail ${pool}/iocage/jails/${uuid}
    fi

    touch ${iocroot}/jails/${uuid}/fstab

    # remove any residual clone snapshots carried over from the RELEASE datasets
    __snapremove ${uuid}@ALL

    # at create time set the default rc.conf
    if [ "${_flag}" != "-e" ] ; then
        echo "hostname=\"${hostname}\"" > ${iocroot}/jails/${uuid}/root/etc/rc.conf
        __jail_rc_conf >> ${iocroot}/jails/${uuid}/root/etc/rc.conf
        __resolv_conf ${uuid} > ${iocroot}/jails/${uuid}/root/etc/resolv.conf
    else
        echo ${uuid}
    fi

    zfs create -o compression=lz4 ${pool}/${jail_zfs_dataset}
    zfs set mountpoint=none ${pool}/${jail_zfs_dataset}
    zfs set jailed=on ${pool}/${jail_zfs_dataset}

    # configure the jail mountpoint
    __hack88_mount ${uuid}

    # Install extra packages
    # this requires working resolv.conf in jail
    if [ "${pkglist}" != "none" ] ; then
        __pkg_install "${iocroot}/jails/${uuid}/root"
    fi
}

# Cloning jails ----------------------------------------------------------
__clone_jail () {
    local _name _snapshot _dataset _zfsconfig _fs_list _fs _cfs

    _name=${1%%@*}
    __check_name "${_name}"
    
    _snapshot=${1#*@}

    _dataset=$(__find_jail ${_name})
    __check_dataset "${_dataset}" ${_name}

    _zfsconfig=$(__configure_jail generate)
    _fs_list=$(zfs list -rHo name ${_dataset})

    if [ -z "${_snapshot}" ] ; then
        zfs snapshot -r ${_dataset}@${uuid}
        for _fs in ${_fs_list} ; do
            _cfs=$(echo ${_fs} | sed s#${_dataset}#${pool}/iocage/jails/${uuid}#g)
            if [ $(echo ${_cfs} | grep -c data$) -eq 1 ] ; then
                zfs clone -o mountpoint=none -o jailed=on ${_fs}@${uuid} ${_cfs}
            else
                echo "zfs clone ${_zfsconfig} ${_fs}@${uuid} ${_cfs}" | sh
            fi
        done
    else
        for _fs in ${_fs_list} ; do
            _cfs=$(echo ${_fs} | sed s#${_dataset}#${pool}/iocage/jails/${uuid}#g)
            if [ $(echo ${_cfs} | grep -c data$) -eq 1 ] ; then
                zfs clone -o mountpoint=none -o jailed=on ${_fs}@${_snapshot} ${_cfs}
            else
                echo "zfs clone ${_zfsconfig} ${_fs}@${_snapshot} ${_cfs}" | sh
            fi
        done
    fi

    #__configure_jail $pool/iocage/jails/$uuid
    mv ${iocroot}/jails/${uuid}/fstab ${iocroot}/jails/${uuid}/fstab.${_name}
    touch $iocroot/jails/${uuid}/fstab

    cat ${iocroot}/jails/${uuid}/root/etc/rc.conf | \
        sed -E "s/[a-zA-Z0-9]{8,}-.*-.*-.*-[a-zA-Z0-9]{12,}/${uuid}/g" \
            > ${iocroot}/jails/${uuid}/rc.conf

    mv ${iocroot}/jails/${uuid}/rc.conf \
       ${iocroot}/jails/${uuid}/root/etc/rc.conf
}

# Destroy jails --------------------------------------------------------------
__destroy_jail () {
    local _force _name
    
    if [ "${1}" == "-f" ] ; then
        _force=1
        _name=${2}
    else
        _force=0
        _name=${1}
    fi

    __check_name_all "${_name}"

    if [ ${_name} == "ALL" ] ; then
        __destroy_all
    else
        __destroy_func ${_force} ${_name}
    fi
}

__destroy_all () {
    local _answer _jails _jail _fulluuid
    
    echo
    echo "  WARNING: this will destroy ALL jails"
    echo
    echo "  Please make sure all jails are stopped before continuing."
    echo
    echo -n "  Are you sure ? y[N]: "
    read _answer

    if [ "${_answer}" == "Y" ] || [ "${_answer}" == "y" ] ; then
        echo "  Destroying all jails"
        _jails=$(__find_jail ALL)

        for _jail in $_jails ; do
            _fulluuid=$(__get_dataset_ioc_prop host_hostuuid ${_jail})
            __destroy_func 1 ${_fulluuid}
        done

        rm -f ${iocroot}/tags/*
        exit 0
    else
        echo "  Command not confirmed.  No action taken."
        exit 1
    fi
}

__destroy_func () {
    local _force _name _dataset _tag _origin _fulluuid _mountpoint _jail_type

    _force=${1}
    _name=${2}
    
    _dataset=$(__find_jail ${_name})
    __check_dataset "${_dataset}" ${_name}

    _fulluuid=$(__get_dataset_ioc_prop host_hostuuid ${_dataset})
    _tag=$(__get_dataset_ioc_prop tag ${_dataset})
    
    if [ ${_force} -ne 1 ] ; then
        echo
        echo "  WARNING: this will destroy jail ${_fulluuid} (${_tag})"
        echo "  Dataset: ${_dataset}"
        echo
        echo -n "  Are you sure ? y[N]: "
        read _answer

        if [ "${_answer}" != "Y" ] && [ "${_answer}" != "y" ] ; then
            echo "  Command not confirmed.  No action taken."
            exit 1
        fi
    fi

    ! __is_running ${_fulluuid} ||
        __fatal_error "Jail is still up and running!"

    _origin=$(__get_dataset_zfs_prop origin ${_dataset})
    _mountpoint=$(__get_dataset_zfs_prop mountpoint ${_dataset})
    _jail_type=$(__get_dataset_ioc_prop type ${_dataset})

    echo "  Destroying: ${_fulluuid}"

    __unlink_tag ${_dataset}

    zfs destroy -fr ${_dataset}

    if [ "${_origin}" != "-" ] ; then
        echo "  Destroying clone origin: ${_origin}"
        zfs destroy -r ${_origin}
    fi

    if [ "${_jail_type}" == "basejail" ] ; then
        zfs destroy -fr ${pool}/iocage/base@${_fulluuid}
    fi
}

# check if our datasets exist, if not create them
# fixes https://github.com/iocage/iocage/issues/80
__check_filesystems () {
    local _missing _filesystems _fs

    _missing=0
    _filesystems="${iocroot}
                  ${iocroot}/jails
                  ${iocroot}/.defaults
                  ${iocroot}/download
                  ${iocroot}/releases"

    for _fs in ${_filesystems} ; do
        zfs get -H creation ${pool}${_fs} > /dev/null 2>&1
        if [ ${?} -ne 0 ] ; then
            _missing=1
            echo "  INFO: Creating ${pool}${_fs}"
            zfs create -p ${pool}${_fs}
            zfs set mountpoint=${_fs} ${pool}${_fs}
            if [ ${_fs} == ${iocroot}/.defaults ] ; then
                __reset_jail_props default > /dev/null 2>&1
            fi
        fi
    done

    if [ ${_missing} -gt 0 ] ; then
        zfs mount -a
    fi
}
