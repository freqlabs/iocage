#!/bin/sh

# activate pool for iocage
# intended for automation tool
__activate () {
    local _pool

    _pool=${1}

    __set_dataset_ioc_prop active=yes ${_pool}
}

__create_basejail () {
    local _release _fs

    _release=${1}

    echo
    echo -n "Creating basejail ZFS datasets..."

    for _fs in ${bfs_list} ; do
        zfs create -o compression=lz4 -p \
            ${pool}/iocage/base/${_release}/root/${_fs}
    done

    echo " OK"
}

__reclone_basejail () {
    local _dataset _fulluuid _jail_release _fs

    _dataset=${1}
    
    _fulluuid=$(__get_dataset_ioc_prop host_hostuuid ${_dataset})
    _jail_release=$(__get_dataset_ioc_prop release ${_dataset})

    zfs destroy -rRf ${pool}/iocage/base@${_fulluuid}
    zfs snapshot -r  ${pool}/iocage/base@${_fulluuid}

    echo "* ${_fulluuid} is a basejail, re-cloning jail.."

    # Re-clone required filesystems
    for _fs in ${bfs_list} ; do
        # echo "  re-cloning: ${_dataset}/root/${_fs}"
        zfs clone \
            ${pool}/iocage/base/${_jail_release}/root/${_fs}@${_fulluuid} \
            ${_dataset}/root/${_fs}
    done
}

# This creates jails ---------------------------------------------------
__create_jail () {
    local _flag _configured _dataset _fs_list _zfsconfig _fs _dir

    { zfs list -r ${pool}/iocage/releases | grep -q ${release} ; } ||
        __fatal_error "Release ${release} not found locally, run fetch first."

    _flag=${1}

    _configured=0
    _dataset=${pool}/iocage/jails/${uuid}

    case "${_flag}" in
        -c)
            _fs_list=$(zfs list -rHo name ${pool}/iocage/releases/${release})
            _zfsconfig=$(__configure_jail generate)

            zfs snapshot -r ${pool}/iocage/releases/${release}@${uuid}

            for _fs in ${_fs_list} ; do
                cfs=$(echo ${_fs} | sed s#/releases/${release}#/jails/${uuid}#g)
                eval "zfs clone ${_zfsconfig} ${_fs}@${uuid} ${_cfs}"
            done
            
            _configured=1
            ;;
        
        -e)
            _zfsconfig=$(__configure_jail generate)

            eval "zfs create -p ${_zfsconfig} ${_dataset}"
            zfs create -p ${_dataset}/root

            _configured=1
            ;;
        
        -b)
            export type="basejail"
            _zfsconfig=$(__configure_jail generate)

            zfs snapshot -r ${pool}/iocage/base@${uuid}
            eval "zfs create -p ${_zfsconfig} ${_dataset}"
            zfs create -o compression=lz4 -p ${_dataset}/root/usr

            for _fs in ${bfs_list} ; do
                zfs clone -o compression=lz4 -o readonly=on \
                    ${pool}/iocage/base/${release}/root/${_fs}@${uuid} \
                    ${_dataset}/root/${_fs}
            done

            for _dir in ${bdir_list} ; do
                cp -a ${iocroot}/base/${release}/root/${_dir} \
                   ${iocroot}/jails/${uuid}/root/${_dir}
            done
            
            _configured=1
            ;;

        *)
            zfs snapshot -r ${pool}/iocage/releases/${release}@${uuid}
            zfs send     -R ${pool}/iocage/releases/${release}@${uuid} \
            | zfs recv      ${_dataset}
            zfs destroy  -r ${pool}/iocage/releases/${release}@${uuid}
            zfs destroy  -r ${_dataset}@${uuid}
            ;;
    esac

    if [ ${_configured} -ne 1 ] ; then
        __configure_jail ${_dataset}
    fi

    touch ${iocroot}/jails/${uuid}/fstab

    # remove any residual clone snapshots carried over from the RELEASE datasets
    __snapremove ${_dataset} ALL

    # at create time set the default rc.conf
    if [ "${_flag}" != "-e" ] ; then
        echo "hostname=\"${hostname}\"" > ${iocroot}/jails/${uuid}/root/etc/rc.conf
        __jail_rc_conf >> ${iocroot}/jails/${uuid}/root/etc/rc.conf
        __resolv_conf ${_dataset} > ${iocroot}/jails/${uuid}/root/etc/resolv.conf
    else
        echo ${uuid}
    fi

    zfs create -o compression=lz4 ${pool}/${jail_zfs_dataset}
    zfs set mountpoint=none ${pool}/${jail_zfs_dataset}
    zfs set jailed=on ${pool}/${jail_zfs_dataset}

    # Install extra packages
    # this requires working resolv.conf in jail
    if [ "${pkglist}" != "none" ] ; then
        __hack88_mount ${_dataset}
        __pkg_install "${iocroot}/jails/${uuid}/root"
    fi
}

# Cloning jails ----------------------------------------------------------
__clone_jail () {
    local _dataset _snapshot _zfsconfig _fs_list _fs _cfs
    local _clone_dataset _mountpoint

    _dataset=${1}
    _snapshot=${2:-@${uuid}}

    _zfsconfig=$(__configure_jail generate)
    _fs_list=$(zfs list -rHo name ${_dataset})

    if ! zfs list ${_dataset}${_snapshot} >&- 2>&- ; then
        zfs snapshot -r ${_dataset}${_snapshot}
    fi

    for _fs in ${_fs_list} ; do
        _cfs=$(echo ${_fs} | sed s#${_dataset}#${pool}/iocage/jails/${uuid}#g)
        if echo ${_cfs} | grep -q data$ ; then
            zfs clone -o mountpoint=none -o jailed=on ${_fs}${_snapshot} ${_cfs}
        else
            eval "zfs clone ${_zfsconfig} ${_fs}${_snapshot} ${_cfs}"
        fi
    done

    _clone_dataset=${pool}/iocage/jails/${uuid}
    _mountpoint=$(__get_dataset_zfs_prop mountpoint ${_clone_dataset})

    mv ${_mountpoint}/fstab ${_mountpoint}/fstab.${uuid}
    touch ${_mountpoint}/fstab

    sed -E -e "s/[a-zA-Z0-9]{8,}-.*-.*-.*-[a-zA-Z0-9]{12,}/${uuid}/g" \
        -i '' ${_mountpoint}/root/etc/rc.conf
}

# Destroy jails --------------------------------------------------------------
__destroy_jail () {
    local _dataset _force _fulluuid _origin _jail_type

    _dataset=${1}
    _force=${2}
    
    _fulluuid=$(__get_dataset_ioc_prop host_hostuuid ${_dataset})
    if __is_running ${_fulluuid} ; then
        if [ "${_force}" -eq 1 ] ; then
            __stop_jail ${_dataset}
        else
            __fatal_error "Jail is still up and running (use -f to force)!"
        fi
    fi

    _origin=$(__get_dataset_zfs_prop origin ${_dataset})
    _jail_type=$(__get_dataset_ioc_prop type ${_dataset})

    echo "  Destroying: ${_fulluuid}"

    __unlink_tag ${_dataset}
    zfs destroy -fr ${_dataset}

    if [ "${_origin}" != "-" ] ; then
        echo "  Destroying clone origin: ${_origin}"
        zfs destroy -r ${_origin}
    fi

    if [ "${_jail_type}" == "basejail" ] ; then
        zfs destroy -fr ${pool}/iocage/base@${_fulluuid}
    fi
}

__destroy_all () {
    local _force _jails _jail

    _force=${1}
    
    _jails=$(__find_jail ALL)

    echo "  Destroying all jails"

    for _jail in ${_jails} ; do
        __destroy_jail ${_jail} ${_force}
    done

    rm -f ${iocroot}/tags/*
}

# check if our datasets exist, if not create them
# fixes https://github.com/iocage/iocage/issues/80
__check_filesystems () {
    local _missing _filesystems _fs

    _missing=0
    _filesystems="${iocroot}
                  ${iocroot}/jails
                  ${iocroot}/.defaults
                  ${iocroot}/download
                  ${iocroot}/releases"

    for _fs in ${_filesystems} ; do
        zfs get -H creation ${pool}${_fs} > /dev/null 2>&1
        if [ ${?} -ne 0 ] ; then
            _missing=1
            echo "  INFO: Creating ${pool}${_fs}"
            zfs create -p ${pool}${_fs}
            zfs set mountpoint=${_fs} ${pool}${_fs}
            if [ ${_fs} == ${iocroot}/.defaults ] ; then
                __reset_jail_props default > /dev/null 2>&1
            fi
        fi
    done

    if [ ${_missing} -gt 0 ] ; then
        zfs mount -a
    fi
}

# Check the version of iocage this pool is compatible with.
#
# If the version isn't compatible, make it compatible.
__check_pool_version () {
    local _ondisk_version

    _ondisk_version=$(__get_dataset_ioc_prop version ${pool})

    if [ "${_ondisk_version}" != "${iocage_version}" ] ; then
        echo -n "Updating properties..." >&2
        __update_ioc_properties
        echo "  done." >&2
    fi
}

# Add missing ioc properties to existing jails.
#
# When iocage is updated and new properties are added, these properties
# will be missing from existing jails. This function looks for any unset
# properties and sets them to "none".
__update_ioc_properties () {
    local _CONF _jails _jail _prop _value

    _CONF="${CONF_RCTL}
           ${CONF_NET}
           ${CONF_JAIL}
           ${CONF_CUSTOM}
           ${CONF_SYNC}
           ${CONF_FTP}"

    _jails=$(__find_jail ALL)

    for _jail in ${_jails} ; do
        for _prop in ${_CONF} ; do
            _value=$(__get_dataset_ioc_prop ${_prop} ${_jail})
            if [ "${_value}" == "-" ] ; then
                __set_dataset_ioc_prop ${_prop}=none ${_jail}
            fi
        done
    done

    __set_dataset_ioc_prop version="${iocage_version}" ${pool}
}
