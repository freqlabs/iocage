#!/bin/sh

# activate pool for iocage
# intended for automation tool
__activate () {
    local _pool

    _pool=${1}

    __set_dataset_ioc_prop active=yes ${_pool}
}

__deactivate () {
    local _pool

    _pool=${1}

    __unset_dataset_ioc_prop active ${_pool}
}

__create_basejail () {
    local _release _fs

    _release=${1}

    __stderr -n "INFO: Creating basejail ZFS datasets..."

    for _fs in ${bfs_list} ; do
        zfs create -o compression=lz4 -p \
            ${pool}/iocage/base/${_release}/root/${_fs}
    done

    __stderr -e " ${OK}"
}

__reclone_basejail () {
    local _dataset _fulluuid _id _jail_release _fs

    _dataset=${1}

    _fulluuid=$(__get_dataset_ioc_prop host_hostuuid ${_dataset})
    _id="[${_fulluuid}]"
    _jail_release=$(__get_dataset_ioc_prop release ${_dataset})

    zfs destroy -rRf ${pool}/iocage/base@${_fulluuid} 2>/dev/null
    zfs snapshot -r  ${pool}/iocage/base@${_fulluuid} 2>/dev/null

    echo -e "${_id} Re-creating base snapshot ${OK}"

    # Re-clone required filesystems
    for _fs in ${bfs_list} ; do
        zfs destroy -f ${_dataset}/root/${_fs} 2>/dev/null
        zfs clone \
            ${pool}/iocage/base/${_jail_release}/root/${_fs}@${_fulluuid} \
            ${_dataset}/root/${_fs}
    done

    echo -e "${_id} Re-cloning base filesystems ${OK}"
}

# This creates jails ---------------------------------------------------
__create_jail () {
    local _flag _dataset _mountpoint

    _flag=${1}

    _dataset=${pool}/iocage/jails/${uuid}

    case "${_flag}" in
        # Create a cloned jail.
        "-c") __create_jail_clone_datasets ${_dataset} ;;

        # Create an empty jail.
        "-e") __create_jail_empty_datasets ${_dataset} ;;

        # Create a basejail.
        "-b") __create_jail_basejail_datasets ${_dataset} ;;

        # Create a standard jail.
        *) __create_jail_standard_datasets ${_dataset} ;;
    esac

    # Create the default jail_zfs_dataset just in case the user wants it.
    zfs create -p -o compression=lz4 ${pool}/${jail_zfs_dataset}
    zfs set mountpoint=none ${pool}/${jail_zfs_dataset}
    zfs set jailed=on ${pool}/${jail_zfs_dataset}

    # Update the mountpoint for hack88.
    __update_mountpoint ${_dataset}
    _mountpoint=$(__get_dataset_zfs_prop mountpoint ${_dataset})

    __jail_fstab > ${_mountpoint}/fstab

    # Perform additional steps for non-empty jails.
    if [ "${_flag}" != "-e" ] ; then

        # Remove any clone snapshots carried over from the RELEASE datasets.
        __snapremove ${_dataset} ALL

        # Write the default rc.conf to the jail.
        echo "hostname=\"${hostname}\"" > ${_mountpoint}/root/etc/rc.conf
        __jail_rc_conf >> ${_mountpoint}/root/etc/rc.conf

        # Give the jail a resolv.conf according to the resolver property.
        __resolv_conf ${_dataset}

        # Install extra packages. This requires working resolv.conf in the jail.
        if [ "${pkglist}" != "none" ] ; then
            __pkg_install ${_dataset}
        fi

    fi

    # Echo the UUID so the user doesn't have to immediately run `iocage list`.
    echo ${uuid}
}

# Create the datasets for a cloned jail.
__create_jail_clone_datasets () {
    local _dataset _fs_list _zfsconfig _cfs _fs

    _dataset=${1}

    # Make sure ${release} has been fetched already.
    __require_release_fetched

    # Look at the release to see what filesystems we need to make.
    _fs_list=$(zfs list -Hro name ${pool}/iocage/releases/${release})

    # Generate a fresh config for this jail. This might fail.
    _zfsconfig=$(__configure_jail generate) ||
        __fatal_error "A problem occurred while configuring the jail."

    # Take and clone a snapshot of the release for this jail.
    zfs snapshot -r ${pool}/iocage/releases/${release}@${uuid}

    for _fs in ${_fs_list} ; do
        _cfs=$(echo ${_fs} \
               | sed s#/releases/${release}#/jails/${uuid}#g)
        eval "zfs clone ${_zfsconfig} ${_fs}@${uuid} ${_cfs}"
    done
}

# Create the datasets for an empty jail.
__create_jail_empty_datasets () {
    local _dataset _zfsconfig

    _dataset=${1}

    # Empty jails don't require a fetched release.

    # Generate a fresh config for this jail. This might fail.
    _zfsconfig=$(__configure_jail generate) ||
        __fatal_error "A problem occurred while configuring the jail."

    # Create the datasets for this jail.
    eval "zfs create -p ${_zfsconfig} ${_dataset}"
    zfs create -p ${_dataset}/root
}

# Create the datasets for a basejail jail.
__create_jail_basejail_datasets () {
    local _dataset _zfsconfig _fs _dir

    _dataset=${1}

    # Make sure ${release} has been fetched already.
    __require_release_fetched

    # Generate a fresh config for this jail. This might fail.
    export type="basejail"
    _zfsconfig=$(__configure_jail generate) ||
        __fatal_error "A problem occurred while configuring the jail."

    # Create the persistent datasets for this jail.
    eval "zfs create -p ${_zfsconfig} ${_dataset}"
    zfs create -o compression=lz4 -p ${_dataset}/root/usr

    # Take and clone readonly snapshots of the base filesystems for this jail.
    zfs snapshot -r ${pool}/iocage/base@${uuid}
    for _fs in ${bfs_list} ; do
        zfs clone -o compression=lz4 -o readonly=on \
            ${pool}/iocage/base/${release}/root/${_fs}@${uuid} \
            ${_dataset}/root/${_fs}
    done

    # Populate our persistent files with copies from the release.
    for _dir in ${bdir_list} ; do
        cp -a ${iocroot}/base/${release}/root/${_dir} \
           ${iocroot}/jails/${uuid}/root/${_dir}
    done

    # Remove any clone snapshots carried over from the RELEASE datasets.
    __snapremove ${_dataset} ALL
}

# Create the datasets for a standard jail.
__create_jail_standard_datasets () {
    local _dataset

    _dataset=${1}

    # Make sure ${release} has been fetched already.
    __require_release_fetched

    # Make a full copy of the release for this jail's dataset.
    zfs snapshot -r ${pool}/iocage/releases/${release}@${uuid}
    zfs send     -R ${pool}/iocage/releases/${release}@${uuid} \
    | zfs recv      ${_dataset}
    zfs destroy  -r ${pool}/iocage/releases/${release}@${uuid}
    zfs destroy  -r ${_dataset}@${uuid}

    # Apply our jail configuration to the existing dataset.
    __configure_jail ${_dataset}

    # Remove any clone snapshots carried over from the RELEASE datasets.
    __snapremove ${_dataset} ALL
}

# Cloning jails ----------------------------------------------------------
__clone_jail () {
    local _switches _dataset _snapshot _zfsconfig _clone_dataset _fs_list _fs \
          _cfs _mountpoint

    _switches=${1} # {keep props}{keep fstab}
    _dataset=${2}
    _snapshot=${3:-${uuid}}

    # Get the configuration for this jail, either from defaults or the source.
    # _switches: {keep props?}{don't care}
    case ${_switches} in
        # Use properties from the defaults.
        0?) _zfsconfig=$(__configure_jail generate) ;;
        1?) _zfsconfig=$(__configure_jail generate ${_dataset}) ;;
    esac ||
        __fatal_error "A problem occurred while configuring the jail."

    if ! zfs list ${_dataset}@${_snapshot} >&- 2>&- ; then
        zfs snapshot -r ${_dataset}@${_snapshot}
    fi

    _clone_dataset=${pool}/iocage/jails/${uuid}

    _fs_list=$(zfs list -Hro name ${_dataset})
    for _fs in ${_fs_list} ; do
        _cfs=$(echo ${_fs} | sed s#${_dataset}#${_clone_dataset}#g)
        if [ ${_cfs} = ${_clone_dataset}/data ] ; then
            zfs clone -o mountpoint=none -o jailed=on \
                ${_fs}@${_snapshot} ${_cfs}
        else
            eval "zfs clone ${_zfsconfig} ${_fs}@${_snapshot} ${_cfs}"
        fi
    done

    __update_mountpoint ${_clone_dataset}
    _mountpoint=$(__get_dataset_zfs_prop mountpoint ${_clone_dataset})

    # Optionally keep the fstab file in place, if asked to.
    # _switches: {don't care}{keep fstab}
    case ${_switches} in
        # Not asked to keep fstab. Make a backup and create a new blank fstab.
        ?0)
            mv ${_mountpoint}/fstab ${_mountpoint}/fstab.${uuid}
            __jail_fstab > ${_mountpoint}/fstab
            ;;
    esac

    # Some very special jails might not have an rc.conf.
    if [ -e ${_mountpoint}/root/etc/rc.conf ] ; then
        # Update hostname in the clone's rc.conf to the new UUID.
        sed -E -e "s/[a-zA-Z0-9]{8,}-.*-.*-.*-[a-zA-Z0-9]{12,}/${uuid}/g" \
            -i '' ${_mountpoint}/root/etc/rc.conf
    fi
}

# Destroy jails --------------------------------------------------------------
__destroy_jail () {
    local _dataset _force _clones _clone _fulluuid _tag _origin _jail_type

    _dataset=${1}
    _force=${2}

    if [ ${_dataset} = ${pool}/iocage/.defaults ] ; then
        __info "Destroying user defaults"
        zfs destroy -fr ${_dataset}
        return
    fi

    # Check for clones of this jail.
    _clones=$(zfs list -Hrd1 -t snapshot -o clones ${_dataset})
    for _clone in ${_clones} ; do
        _tag=$(__get_dataset_ioc_prop tag ${_clone})
        _fulluuid=$(__get_dataset_ioc_prop host_hostuuid ${_clone})
        __error "Dependent clone: ${_fulluuid} (${_tag})"
    done
    [ $(__wc ${_clones}) -eq 0 ] ||
        __fatal_error "Cannot destroy jail with dependent clones."

    _fulluuid=$(__get_dataset_ioc_prop host_hostuuid ${_dataset})
    if __is_running ${_fulluuid} ; then
        if [ ${_force} -eq 1 ] ; then
            __stop_jail ${_dataset}
        else
            __fatal_error "Jail is still up and running (use -f to force)!"
        fi
    fi

    _tag=$(__get_dataset_ioc_prop tag ${_dataset})
    _origin=$(__get_dataset_zfs_prop origin ${_dataset})
    _jail_type=$(__get_dataset_ioc_prop type ${_dataset})

    __info "Destroying ${_fulluuid} (${_tag})"

    __unlink_tag ${_dataset}
    zfs destroy -fr ${_dataset}

    if [ "${_origin}" != "-" ] ; then
        __info "Destroying clone origin ${_origin}"
        zfs destroy -r ${_origin}
    fi

    if [ "${_jail_type}" = "basejail" ] ; then
        __info "Destroying base snapshot @${_fulluuid}"
        zfs destroy -fr ${pool}/iocage/base@${_fulluuid}
    fi
}

__destroy_all () {
    local _force _jails _jail

    _force=${1}

    _jails=$(__find_jail ALL)

    __info "Destroying all jails"

    for _jail in ${_jails} ; do
        __destroy_jail ${_jail} ${_force}
    done

    rm -f ${iocroot}/tags/*
}

# Destroy ${pool}/iocage. Any running iocage jails are stopped first.
__clean_all () {
    local _running _uuid

    # Get a list of all running iocage jails.
    _running=$(jls name | awk '/^ioc-/ { sub(/^ioc-/, "", $1); print $1 }')

    # Stop them all in parallel.
    for _uuid in ${_running} ; do
        __stop_jail ${pool}/iocage/jails/${_uuid} &
    done

    # Wait for all the jails to be stopped.
    wait

    # Destroy the iocage dataset.
    __info "Destroying ${pool}/iocage"
    zfs destroy -rRf ${pool}/iocage
}

# Destroy ${pool}/iocage/releases and ${pool}/iocage/base. Any running iocage
# jails that are cloned from either of these datasets are stopped first.
__clean_releases () {
    local _running _clones _uuid

    #
    # Stop all running iocage jails that are clones of a release.
    #

    # Create a regex for matching the running iocage jails. The resulting
    # string will have an extra | at the end which will need to be removed.
    _running=$(jls name \
               | awk '/^ioc-/ { sub(/^ioc-/, "", $1); printf "%s|", $1 }')

    # Pipeline description:
    # - zfs ...
    # List jail datasets alongside their origin. To match basejails requires the
    # list depth to be set to 3,
    #
    # - awk ...
    # Match the origin against the datasets to be removed and the UUID against
    # the running jails. Split the dataset name into parts and print the UUID \
    # portion.
    #
    # - uniq
    # Eliminate duplicate UUIDs that appear due the the depth of the listing.
    _clones=$(zfs list -Hrd3 -o name,origin ${pool}/iocage/jails \
              | awk -v origins="^${pool}/iocage/(releases|base)/" \
                    -v running="${_running%|}" \
                    '$2 ~ origins && $1 ~ running {
                       split($1, name, "/");
                       print name[4];
                     }' \
              | uniq)

    # Stop running jails in parallel.
    for _uuid in ${_clones} ; do
        __stop_jail ${pool}/iocage/jails/${_uuid} &
    done

    # Wait for the jails to be stopped.
    wait

    #
    # Destroy the releases and the bases created from them.
    #

    __info "Destroying ${pool}/iocage/base"
    zfs destroy -rRf ${pool}/iocage/base

    __info "Destroying ${pool}/iocage/downloaded"
    zfs destroy -rRf ${pool}/iocage/download

    __info "Destroying ${pool}/iocage/releases"
    zfs destroy -rRf ${pool}/iocage/releases
}

# Destroy ${pool}/iocage/jails. Any running jails are stopped first.
__clean_jails () {
    local _running _uuid

    # Get a list of all running iocage jails.
    _running=$(jls name | awk '/^ioc-/ { sub(/^ioc-/, "", $1); print $1 }')

    # Stop them all in parallel.
    for _uuid in ${_running} ; do
        __stop_jail ${pool}/iocage/jails/${_uuid} &
    done

    # Wait for all the jails to be stopped.
    wait

    # Destroy the jails dataset.
    __info "Destroying ${pool}/iocage/jails"
    zfs destroy -rRf ${pool}/iocage/jails

    # Remove all the tag symlinks.
    __info "Removing symlinks in ${iocroot}/tags"
    rm -f ${iocroot}/tags/*
}

# check if our datasets exist, if not create them
# fixes https://github.com/iocage/iocage/issues/80
__check_filesystems () {
    local _missing _filesystems _fs

    _missing=0
    _filesystems="${iocroot}
                  ${iocroot}/jails
                  ${iocroot}/.defaults
                  ${iocroot}/download
                  ${iocroot}/releases"

    for _fs in ${_filesystems} ; do
        zfs get -H creation ${pool}${_fs} > /dev/null 2>&1
        if [ ${?} -ne 0 ] ; then
            _missing=1
            __info "Creating ${pool}${_fs}"
            __require_root \
                "Please run iocage once as root to create missing datasets."
            zfs create -p ${pool}${_fs}
            zfs set mountpoint=${_fs} ${pool}${_fs}
            if [ ${_fs} = ${iocroot}/.defaults ] ; then
                __update_defaults_ioc_properties
            fi
        fi
    done

    if [ ${_missing} -ne 0 ] ; then
        zfs mount -a
    fi

    if [ ! -d ${iocroot}/tags ] ; then
        __info "Creating ${iocroot}/tags"
        __require_root \
            "Please run iocage once as root to create missing directories."
        mkdir -p ${iocroot}/tags
    fi
}

# Check that all our jails are compatible with this version of iocage.
#
# If a jail isn't compatible, make it compatible.
#
# Version is stored per-jail so that when jails are transferred between
# different versions of iocage, we can detect and fix missing properties without
# requiring manual intervention.
__check_jails_ioc_version () {
    local _mismatches _dataset

    # This is only slightly complicated because the version string contains
    # parenthesis which must be escaped. Here's the play-by-play:
    #
    # Find the dataset and the iocage version for each jail with a recursive
    # zfs list and pipe it to our best friend, awk.
    #
    # Start awk by setting the variable version="${iocage_version}", then do a
    # global string substitution in the BEGIN action to escape the parenthesis
    # around the date in the version string.
    #
    # The first line of input to awk will be ${pool}${iocroot}/jails because of
    # how zfs lists datasets recursively, so we skip that line with FNR > 1.
    #
    # If the line doesn't contain our version string, print the first field,
    # which gives us the dataset with a mismatched version.
    _mismatches=$(zfs get -Hrd1 -o name,value \
                      ${module}:iocage_version \
                      ${pool}${iocroot}/jails \
                  | awk -v version="${iocage_version}" \
                        'BEGIN { gsub(/[()]/, "\\\\&", version) }
                         FNR > 1 && $0 !~ version { print $1 }')

    [ $(__wc ${_mismatches}) -eq 0 ] ||
        __require_root \
            "Please run iocage once as root to update jail properties."

    for _dataset in ${_mismatches} ; do
        __update_dataset_ioc_properties ${_dataset} &
    done

    wait
}

# Check that our user defaults are compatible with this version of iocage.
#
# If the defaults aren't compatible, make them compatible.
__check_defaults_ioc_version () {
    local _dataset _ioc_version

    _dataset=${pool}/iocage/.defaults
    _ioc_version=$(__get_dataset_ioc_prop iocage_version ${_dataset})

    if [ "${_ioc_version}" != "${iocage_version}" ] ; then
        __info "Updating default iocage properties."
        __require_root \
            "Please run iocage once as root to update default properties."
        __update_defaults_ioc_properties
    fi
}

# Add missing ioc properties to the .defaults dataset.
#
# When iocage is updated and new properties are added, these properties
# will be missing from existing jails. This function looks for any unset
# properties on the default dataset and sets them to the hardcoded default.
__update_defaults_ioc_properties () {
    local _dataset _CONF _prop _value

    _dataset=${pool}/iocage/.defaults

    _CONF="${CONF_RCTL}
           ${CONF_NET}
           ${CONF_JAIL}
           ${CONF_CUSTOM}
           ${CONF_SYNC}
           ${CONF_FTP}"

    for _prop in ${_CONF} ; do
        _value=$(__get_dataset_ioc_prop ${_prop} ${_dataset})
        if [ "${_value}" = "-" ] ; then
            eval _value=\$${_prop}
            __set_dataset_ioc_prop ${_prop}="${_value}" ${_dataset}
        fi
    done

    __set_dataset_ioc_prop iocage_version="${iocage_version}" ${_dataset}
}

# Add missing ioc properties to an existing jail dataset.
#
# When iocage is updated and new properties are added, these properties
# will be missing from existing jails. This function looks for any unset
# properties and sets them to the default value.
__update_dataset_ioc_properties () {
    local _dataset _uuid _CONF _prop _value

    _dataset=${1}

    _uuid=$(__get_dataset_ioc_prop host_hostuuid ${_dataset})
    __info "Updating iocage properties for ${_uuid}"

    _CONF="${CONF_RCTL}
           ${CONF_NET}
           ${CONF_JAIL}
           ${CONF_CUSTOM}
           ${CONF_SYNC}
           ${CONF_FTP}"

    for _prop in ${_CONF} ; do
        _value=$(__get_dataset_ioc_prop ${_prop} ${_dataset})
        if [ "${_value}" = "-" ] ; then
            _value=$(__get_default_prop ${_prop})
            __set_dataset_ioc_prop ${_prop}="${_value}" ${_dataset}
        fi
    done

    __set_dataset_ioc_prop iocage_version="${iocage_version}" ${_dataset}
}

# Unset a property by inheriting from the parent dataset.
__unset_dataset_zfs_prop () {
    local _property _dataset

    _property=${1}
    _dataset=${2}

    zfs inherit ${_property} ${_dataset}
}

__unset_dataset_ioc_prop () {
    local _property _dataset

    _property=${1}
    _dataset=${2}

    zfs inherit ${module}:${_property} ${_dataset}
}
