#!/bin/sh
#set -x
# Process command line options-------------------------
__parse_cmd () {
    local _cmd
    
    while [ ${#} -gt 0 ] ; do
        _cmd=${1}
        shift
        case "${_cmd}" in
            activate)
                __cmd_activate "${@}"
                exit
                ;;
            cap)
                __cmd_cap "${@}"
                exit
                ;;
            chroot)
                __cmd_chroot "${@}"
                exit
                ;;
            clone)
                __cmd_clone "${@}"
                exit
                ;;
            console)
                __cmd_console "${@}"
                exit
                ;;
            create)
                __cmd_create "${@}"
                exit
                ;;
            defaults)
                __print_defaults
                exit
                ;;
            destroy)
                __cmd_destroy "${@}"
                exit
                ;;
            df)
                __print_disk
                exit
                ;;
            exec)
                __cmd_exec "${@}"
                exit
                ;;
            export)
                __cmd_export "${@}"
                exit
                ;;
            fetch)
                __cmd_fetch "${@}"
                exit
                ;;
            get)
                __cmd_get "${@}"
                exit
                ;;
            help)
                __help
                exit
                ;;
            init-host)
                __cmd_init_host "${@}"
                exit
                ;;
            inuse)
                __cmd_inuse "${@}"
                exit
                ;;
            import)
                __cmd_import "${@}"
                exit
                ;;
            limits)
                __cmd_limits "${@}"
                exit
                ;;
            list)
                __list_jails "${@}"
                exit
                ;;
            package)
                __cmd_package "${@}"
                exit
                ;;
            promote)
                __cmd_promote "${@}"
                exit
                ;;
            rcboot)
                __rc_jails boot
                exit
                ;;
            rcshutdown)
                __rc_jails shutdown
                exit
                ;;
            record)
                __cmd_record "${@}"
                exit
                ;;
            reset)
                __cmd_reset "${@}"
                exit
                ;;
            restart)
                __cmd_restart "${@}"
                exit
                ;;
            rollback)
                __cmd_rollback "${@}"
                exit
                ;;
            runtime)
                __cmd_runtime "${@}"
                exit
                ;;
            set)
                __cmd_set "${@}"
                exit
                ;;
            show)
                __cmd_show "${@}"
                exit
                ;;
            snaplist)
                __cmd_snaplist "${@}"
                exit
                ;;
            snapremove)
                __cmd_snapremove "${@}"
                exit
                ;;
            snapshot)
                __cmd_snapshot "${@}"
                exit
                ;;
            start)
                __cmd_start "${@}"
                exit
                ;;
            stop)
                __cmd_stop "${@}"
                exit
                ;;
            uncap)
                __cmd_uncap "${@}"
                exit
                ;;
            update)
                __cmd_update "${@}"
                exit
                ;;
            upgrade)
                __cmd_upgrade "${@}"
                exit
                ;;
            *)
                __usage
                exit
                ;;
        esac
        shift
    done
}

__cmd_activate () {
    local _pool

    _pool=${1}
    __require_not_empty "${_pool}" "Missing pool name!"
    __require_single_word "${_pool}" "Invalid pool name!"

    __activate ${_pool}
}

__cmd_cap () {
    local _name _dataset

    _name=${1}
    __check_name "${_name}"

    _dataset=$(__find_jail ${_name})
    __check_dataset "${_dataset}" ${_name}

    __rctl_limits ${_dataset}
}

__cmd_chroot () {
    local _name _dataset

    _name=${1}
    __check_name "${_name}"

    _dataset=$(__find_jail ${_name})
    __check_dataset "${_dataset}" ${_name}

    shift
    __chroot ${_dataset} "${@}"
}

__cmd_clone () {
    local _name _snapshot _dataset

    _name=${1%%@*}
    __check_name "${_name}"
    
    _snapshot=${1#${_name}}

    _dataset=$(__find_jail ${_name})
    __check_dataset "${_dataset}" ${_name}

    shift
    __export_props "${@}"
    __clone_jail ${_dataset} ${_snapshot%@}
}

__cmd_console () {
    local _name _dataset

    _name=${1}
    __check_name "${_name}"

    _dataset=$(__find_jail ${_name})
    __check_dataset "${_dataset}" ${_name}

    __console ${_dataset}
}

__cmd_create () {
    __export_props "${@}"
    __create_jail "${@}"
}

__cmd_destroy () {
    local _name _force _answer _dataset _fulluuid _tag

    if [ "${1}" != "-f" ] ; then
        _name=${1}
        _force=0
    else
        _name=${2}
        _force=1
    fi

    __check_name_all "${_name}"

    if [ ${_name} == "ALL" ] ; then
        if [ ${_force} -eq 0 ] ; then
            echo
            echo "  WARNING: this will destroy ALL jails"
            echo
            echo "  Please make sure all jails are stopped before continuing."
            echo
            echo -n "  Are you sure ? y[N]: "
            read _answer

            if [ "${_answer}" != "Y" ] && [ "${_answer}" != "y" ] ; then
                echo "  Command not confirmed.  No action taken."
                exit 1
            fi
        fi

        __destroy_all ${_force}
    else
        _dataset=$(__find_jail ${_name})
        __check_dataset "${_dataset}" ${_name}

        if [ ${_force} -eq 0 ] ; then
            _fulluuid=$(__get_dataset_ioc_prop host_hostuuid ${_dataset})
            _tag=$(__get_dataset_ioc_prop tag ${_dataset})
            echo
            echo "  WARNING: this will destroy jail ${_fulluuid} (${_tag})"
            echo "  Dataset: ${_dataset}"
            echo
            echo -n "  Are you sure ? y[N]: "
            read _answer

            if [ "${_answer}" != "Y" ] && [ "${_answer}" != "y" ] ; then
                echo "  Command not confirmed.  No action taken."
                exit 1
            fi
        fi

        __destroy_jail ${_dataset} ${_force}
    fi
}

__cmd_exec () {
    local _kexecopts _opt _name _dataset
    
    OPTIND=1
    _jexecopts=""

    # check for -U or -u to pass to jexec
    while getopts u:U: _opt "${@}"; do
        case "${_opt}" in
            [uU]) _jexecopts="${_jexecopts} -${_opt} ${OPTARG}";;
            ?)    __fatal_error "Invalid exec option: ${_opt}";;
        esac
    done
    shift $((OPTIND - 1))

    _name=${1}
    __check_name_all "${_name}"

    shift

    if [ ${_name} == "ALL" ]; then
        __exec_all ${_jexecopts} "${@}"
    else
        _dataset=$(__find_jail ${_name})
        __check_dataset "${_dataset}" ${_name}
        
        __exec ${_jexecopts} ${_dataset} "${@}"
    fi
}

__cmd_export () {
    local _name _dataset

    _name=${1}
    __check_name "${_name}"

    _dataset=$(__find_jail ${_name})
    __check_dataset "${_dataset}" ${_name}
    
    __export ${_dataset}
}

__cmd_fetch () {
    __export_props "${@}"
    __fetch_release
}

__cmd_get () {
    local _property _name _dataset

    _property=${1}
    __require_not_empty "${_property}" "Missing arguments!"
    __require_single_word "${_property}" "Invalid property!"

    _name=${2}
    __check_name_default "${_name}"

    _dataset=$(__find_jail ${_name})
    __check_dataset "${_dataset}" ${_name}
    
    __get_jail_prop ${_property} ${_dataset}
}

__cmd_init_host () {
    local _remote _pool

    _remote=${1}
    __require_not_empty "${_remote}" "Missing arguments!"
    __require_single_word "${_remote}" "Invalid remote host!"

    _pool=${2}
    __require_not_empty "${_pool}" "Missing pool name!"
    __require_single_word "${_pool}" "Invalid pool name!"

    __init_host ${_remote} ${_pool}
}

__cmd_inuse () {
    local _name _dataset

    _name=${1}

    if [ -z "${_name}" ] ; then
        __rctl_inuse_all
    else
        __check_name "${_name}"

        _dataset=$(__find_jail ${_name})
        __check_dataset "${_dataset}" ${_name}
    
        __rctl_inuse ${_dataset}
    fi
}

__cmd_import () {
    local _name

    _name=${1}
    __check_name "${_name}"

    shift
    __export_props "${@}"
    __import ${_name}
}

__cmd_limits () {
    local _name _dataset

    _name=${1}

    if [ -z "${_name}" ] ; then
        __rctl_list_all
    else
        __check_name "${_name}"

        _dataset=$(__find_jail ${_name})
        __check_dataset "${_dataset}" ${_name}
    
        __rctl_list ${_dataset}
    fi
}

__cmd_package () {
    local _name _dataset

    _name=${1}
    __check_name "${_name}"

    _dataset=$(__find_jail ${_name})
    __check_dataset "${_dataset}" ${_name}

    __package ${_dataset}
}

__cmd_promote () {
    local _name _dataset

    _name=${1}
    __check_name "${_name}"

    _dataset=$(__find_jail ${_name})
    __check_dataset "${_dataset}" ${_name}

    __promote ${_dataset}
}

__cmd_record () {
    local _action _name _dataset

    _action=${1}
    __require_not_empty "${_action}" "Missing arguments!"
    [ "${_action}" == "start" ] || [ "${_action}" == "stop" ] ||
        __fatal_error "Invalid action! Must be one of start|stop"

    _name=${2}
    __check_name "${_name}"

    _dataset=$(__find_jail ${_name})
    __check_dataset "${_dataset}" ${_name}
    
    __record ${_action} ${_dataset}
}

__cmd_reset () {
    local _name _force _answer _dataset

    if [ "${1}" != "-f" ] ; then
        _name=${1}
        _force=0
    else
        _name=${2}
        _force=1
    fi 

    __check_name_all "${_name}"

    if [ ${_name} == "ALL" ] ; then
        if [ ${_force} -eq 0 ] ; then
            echo
            echo "  WARNING: This will reset ALL jails!"
            echo
            echo -n "  Are you sure? y[N]: "
            read _answer

            if [ "${_answer}" != "Y" ] && [ "${_answer}" != "y" ] ; then
                echo "  Command not confirmed.  No action taken."
                exit 1
            fi
        fi

        echo "  Resetting all jails."

        __reset_jail_props_all
    else
        _dataset=$(__find_jail ${_name})
        __check_dataset "${_dataset}" ${_name}
        
        __reset_jail_props ${_dataset}
    fi
}

__cmd_restart () {
    local _name _dataset

    _name=${1}
    __check_name "${_name}"

    _dataset=$(__find_jail ${_name})
    __check_dataset "${_dataset}" ${_name}

    __restart_jail ${_dataset}
}

__cmd_rollback () {
    local _name _snapshot _dataset

    _name=${1%%@*}
    __check_name "${_name}"

    _snapshot=${1#${_name}}
    __require_not_empty "${_snapshot%@}" "Missing snapshot name!"
    __require_single_word "${_snapshot%@}" "Invalid snapshot name: ${_snapshot}"

    _dataset=$(__find_jail ${_name})
    __check_dataset "${_dataset}" ${_name}
    
    __rollback ${_dataset} ${_snapshot%@}
}

__cmd_runtime () {
    local _name _dataset

    _name=${1}
    __check_name "${_name}"

    _dataset=$(__find_jail ${_name})
    __check_dataset "${_dataset}" ${_name}

    __runtime ${_dataset}
}

__cmd_set () {
    local _property _name _dataset

    _property=${1}
    __require_not_empty "${_property}" "Missing arguments!"
    
    _name=${2}
    __check_name_default "${_name}"

    _dataset=$(__find_jail ${_name})
    __check_dataset "${_dataset}" ${_name}

    __export_props "${@}"
    __set_jail_prop "${_property}" ${_dataset}
}

__cmd_show () {
    local _property

    _property=${1}
    __require_not_empty "${_property}" "Missing property name!"
    __require_single_word "${_property}" "Invalid property name!"

    __show ${_property}
}

__cmd_snaplist () {
    local _name _dataset

    _name=${1}
    __check_name "${_name}"

    _dataset=$(__find_jail ${_name})
    __check_dataset "${_dataset}" ${_name}

    __snaplist ${_dataset}
}

__cmd_snapremove () {
    local _name _snapshot _dataset

    _name=${1%%@*}
    __check_name "${_name}"

    _snapshot=${1#${_name}}
    __require_not_empty "${_snapshot%@}" "Missing snapshot name!"
    __require_single_word "${_snapshot%@}" "Invalid snapshot name: ${_snapshot}"

    _dataset=$(__find_jail ${_name})
    __check_dataset "${_dataset}" ${_name}

    __snapremove ${_dataset} ${_snapshot%@}
}

__cmd_snapshot () {
    local _name _snapshot _dataset

    _name=${1%%@*}
    __check_name "${_name}"

    _snapshot=${1#${_name}}
    __require_single_word "${_snapshot%@}" "Invalid snapshot name: ${_snapshot}"

    _dataset=$(__find_jail ${_name})
    __check_dataset "${_dataset}" ${_name}

    __snapshot ${_dataset} ${_snapshot%@}
}

__cmd_start () {
    local _name _dataset

    _name=${1}
    __check_name "${_name}"

    _dataset=$(__find_jail ${_name})
    __check_dataset "${_dataset}" ${_name}
    
    __start_jail ${_dataset}
}

__cmd_stop () {
    local _name _dataset

    _name=${1}
    __check_name "${_name}"

    _dataset=$(__find_jail ${_name})
    __check_dataset "${_dataset}" ${_name}
    
    __stop_jail ${_dataset}
}

__cmd_uncap () {
    local _name _dataset

    _name=${1}
    __check_name "${_name}"

    _dataset=$(__find_jail ${_name})
    __check_dataset "${_dataset}" ${_name}
    
    __rctl_uncap ${_dataset}
}

__cmd_update () {
    local _name _dataset

    _name=${1}
    __check_name "${_name}"

    _dataset=$(__find_jail ${_name})
    __check_dataset "${_dataset}" ${_name}
    
    __update ${_dataset}
}

__cmd_upgrade () {
    local _name _dataset _release

    _name=${1}
    __check_name "${_name}"

    _dataset=$(__find_jail ${_name})
    __check_dataset "${_dataset}" ${_name}

    if [ "${2%%=*}" == "release" ] ; then
        _release=${2#*=}
        __require_not_empty "${_release}" "Missing release!"
        __require_single_word "${_release}" "Invalid release: ${_release}"
        export release=${_release}
    fi
    
    __upgrade ${_dataset}
}
