#!/bin/sh

# Print supported releases----------------------------------
__print_release () {
    local _rel
    
    echo "Supported releases are: "
    for _rel in ${supported_releases} ; do
        printf "%15s\n" "${_rel}"
    done
}

# Print defaults set in this script.
__print_defaults () {
    local _CONF _prop _prop_name _saved_default

    _CONF="${CONF_NET}
           ${CONF_JAIL}
           ${CONF_RCTL}
           ${CONF_CUSTOM}
           ${CONF_ZFS}
           ${CONF_SYNC}
           ${CONF_FTP}"

    for _prop_name in ${_CONF} ; do
        eval _prop="\$${_prop_name}"

        if [ ! -z "${_prop}" ] ; then
            _saved_default=$(__get_jail_prop ${_prop_name} default)
            if [ "${_saved_default}" != "none" ] ; then
                echo "${_prop_name}=${_saved_default}"
            else
                echo "${_prop_name}=${_prop}"
            fi
        fi
    done
}

# Get default value for property if one is found
__get_default_prop () {
    local _property _value

    _property=${1}
    
    __get_jail_prop "${_property}" ${pool}/iocage/.defaults
}

# Find and return the jail's top level ZFS dataset
# Note: parameters are trusted to be valid
__find_jail () {
    local _name _jlist _jails _jail _found _tag _count

    _name=${1}

    if [ ${_name} == "default" ] ; then
        echo "${pool}/iocage/.defaults"
        return 0
    fi
    
    _jails=$(zfs list -rHo name ${pool}/iocage/jails \
             | grep -E "^${pool}/iocage/jails/[a-zA-Z0-9]{8,}-.*-.*-.*-[a-zA-Z0-9]{12,}$")

    if [ ${_name} == "ALL" ] ; then
        for _jail in ${_jails} ; do
            echo ${_jail}
        done
        return 0
    fi
    
    _jlist=""
    _count=0
    for _jail in ${_jails} ; do
        _found=$(echo ${_jail} | grep -iEc "^${pool}/iocage/jails/${_name}")
        
        if [ ${_found} -gt 0 ] ; then
            : $((_count += _found))
            _jlist=${_jail}
            continue
        fi

        _tag=$(__get_dataset_ioc_prop tag ${_jail})

        if [ "${_tag}" == "${_name}" ] ; then
            : $((_count += 1))
            _jlist=${_jail}
        fi
    done

    if [ ${_count} -eq 1 ] ; then
        echo ${_jlist}
    elif [ ${_count} -gt 1 ] ; then
        echo "multiple"
    fi
}

__list_jails () {
    local _jails _switch _all_jids _ioc_jids _state _non_ioc_jids _releases _rel _jail
    local _uuid _boot _tag _mountpoint _template _jid _all_jail _ioc_jail
    local _temp_loop_var _path _ip4 _host_hostname
    
    _jails=$(__find_jail ALL)
    _switch=${1}
    _all_jids=$(jls jid)
    _ioc_jids=""
    _non_ioc_jids=""

    if [ "${_switch}" == "-r" ] ; then
        echo "Downloaded releases:"
        _releases=$(zfs list -o name -Hr ${pool}/iocage/releases \
                    | awk -F/ '/RELEASE$/ { print $4 }')
        for _rel in ${_releases} ; do
            printf "%15s\n" ${_rel}
        done
        exit 0
    fi

    printf "%-4s  %-36s  %s  %s  %s\n" "JID" "UUID" "BOOT" "STATE" "TAG"
    for _jail in ${_jails} ; do
        _uuid=$(__get_dataset_ioc_prop host_hostuuid ${_jail})
        _boot=$(__get_dataset_ioc_prop boot ${_jail})
        _tag=$(__get_dataset_ioc_prop tag ${_jail})
        _mountpoint=$(__get_dataset_zfs_prop mountpoint ${_jail})
        _template=$(__get_dataset_ioc_prop template ${_jail})

        # get jid for iocage jails
        _jid=$(jls -j ioc-${_uuid} jid 2> /dev/null)
        if [ -z "${_jid}"  ] ; then
            _jid="-"
        fi
        _ioc_jids="${_ioc_jids} ${_jid}"

        if __is_running ${_uuid} ; then
            _state="up"
        else
            _state="down"
        fi

        if [ -z "${_switch}" ] ; then
            _switch="zero"
        fi

        if [ "${_switch}" == "-t" ] ; then
            if [ "${_template}" == "yes" ] ; then
                printf "%-4s  %-+.36s  %-3s   %-4s   %s\n" \
                       "${_jid}" "${_uuid}" "${_boot}" "${_state}" "${_tag}"
            fi
        else
            if [ "${_template}" != "yes" ] ; then
                printf "%-4s  %-+.36s  %-4s  %-4s   %s\n" \
                       "${_jid}" "${_uuid}" "${_boot}" "${_state}" "${_tag}"
            fi
        fi
    done

    # create list of active jids not registered in iocage
    for _all_jail in ${_all_jids} ; do
        for _ioc_jail in ${_ioc_jids} ; do
            if [ ${_all_jail} == ${_ioc_jail} ] ; then
                _temp_loop_var=""
                break
            else
                _temp_loop_var=${_all_jail}
            fi
        done
        if [ -n "${_temp_loop_var}" ] ; then
            _non_ioc_jids="${_non_ioc_jids} ${_temp_loop_var}"
        fi
    done

    # output non iocage jails currently active
    if [ -n "${_non_ioc_jids}" ] ; then
        if [ "${_switch}" != "-t" ] ; then
            printf "%-+40s\n" "--- non iocage jails currently active ---"
            printf "%-4s  %-36s  %-15s  %s \n" "JID" "PATH" "IP4" "HOSTNAME"
            for _jid in ${_non_ioc_jids} ; do
                _path=$(jls -j ${_jid} path)
                _ip4=$(jls -j ${_jid} ip4.addr)
                _host_hostname=$(jls -j ${_jid} host.hostname)
                printf "%-4s  %-36.36s  %-15s  %s\n" \
                       "${_jid}" "${_path}" "${_ip4}" "${_host_hostname}"
            done
        fi
    fi
}

__print_disk () {
    local _jails _jail _uuid _tag _crt _res _qta _use _ava
    
    _jails=$(__find_jail ALL)

    printf "%-36s  %s\n  %-6s  %-5s  %-5s  %-5s  %-5s\n" \
           "UUID" "TAG" "CRT" "RES" "QTA" "USE" "AVA"

    for _jail in ${_jails} ; do
        _uuid=$(__get_dataset_ioc_prop host_hostuuid ${_jail})
        _tag=$(__get_dataset_ioc_prop tag ${_jail})
        _crt=$(__get_dataset_zfs_prop compressratio ${_jail})
        _res=$(__get_dataset_zfs_prop reservation ${_jail})
        _qta=$(__get_dataset_zfs_prop quota ${_jail})
        _use=$(__get_dataset_zfs_prop used ${_jail})
        _ava=$(__get_dataset_zfs_prop available ${_jail})

        printf "%-36s  %s\n  %-6s  %-5s  %-5s  %-5s  %-5s\n" \
               "${_uuid}" "${_tag}" \
               "${_crt}" "${_res}" "${_qta}" "${_use}" "${_ava}"
    done
}

__print_disk_parseable () {
    local _ioc

    _ioc="org.freebsd.iocage"

    echo "UUID CRT RES QTA USE AVA"

    zfs get -Hpo value -rd1 \
        ${_ioc}:host_hostuuid,compressratio,reservation,quota,used,available \
        ${pool}/iocage/jails \
    | awk 'NR > 6 { printf "%s%s", $0, (NR % 6 ? " " : "\n") }'
}

__find_mypool () {
    local _found _pools _pool _mypool
    
    _found=0
    _pools=$(zpool list -Ho name)

    for _pool in ${_pools} ; do
        _mypool=$(__get_dataset_ioc_prop active ${_pool})

        if [ "${_mypool}" == "yes" ] ; then
            _found=1
            break
        fi
    done

    if [ ${_found} -ne 1 ] ; then
        if [ -n "${RC_PID}" ] ; then
            # RC_PID set means we are running from rc
            __fatal_error "No pool for iocage jails found on boot."
        fi

        echo "Setting up zpool [${_pool}] for iocage usage..."
        echo "If you wish to change zpool, use 'iocage activate'"
        __activate ${_pool}
    fi

    export pool=${_pool}
}

# Get jail properties
__get_jail_prop () {
    local _property _dataset _found _uuid _status _CONF _prop _value

    _property=${1}
    _dataset=${2}

    _found=0

    # "status" pseudo-property
    if [ ${_property} == "status" ] || [ ${_property} == "all" ] ; then
        _uuid=$(__get_dataset_ioc_prop host_hostuuid ${_dataset})
        if __is_running ${_uuid} ; then
            _status="up"
        else
            _status="down"
        fi
        if [ ${_property} == "all" ] ; then
            _found=1
            echo "status:${_status}"
        else
            echo ${_status}
            return
        fi
    fi

    _CONF="${CONF_NET}
           ${CONF_JAIL}
           ${CONF_RCTL}
           ${CONF_CUSTOM}
           ${CONF_SYNC}
           ${CONF_FTP}"

    for _prop in ${_CONF} ; do
        if [ ${_prop} == ${_property} ] ; then
            _found=1
            __get_dataset_ioc_prop ${_prop} ${_dataset}
            return

        elif [ ${_property} == "all" ] ; then
            _found=1
            _value=$(__get_dataset_ioc_prop ${_prop} ${_dataset})
            echo "${_prop}:${_value}"
        fi
    done

    if [ ${_found} -ne 1 ] ; then
        for _prop in ${CONF_ZFS} ; do
            if [ ${_prop} == ${_property} ] ; then
                _found=1
                __get_dataset_zfs_prop ${_prop} ${_dataset}
                return
            fi
        done
    fi
    
    [ ${_found} -eq 1 ] ||
        __fatal_error "Unsupported property: ${_property}"
}

__get_dataset_zfs_prop () {
    local _prop _dataset

    _prop=${1}
    _dataset=${2}

    zfs get -Ho value ${_prop} ${_dataset}
}

__get_dataset_ioc_prop () {
    local _prop _dataset

    _prop=${1}
    _dataset=${2}

    zfs get -Ho value org.freebsd.iocage:${_prop} ${_dataset}
}

__runtime () {
    local _dataset _fulluuid _params _param

    _dataset=${1}
    
    _fulluuid=$(__get_dataset_ioc_prop host_hostuuid ${_dataset})

    # this all seems a bit silly...
    _params=$(jls -nj ioc-${_fulluuid})
    __require_not_empty "${_params}" "Jail ${_fulluuid} is not up..."

    for _param in ${_params} ; do
        echo "  ${_param}"
    done
}

# search for executable prestart|poststart|prestop|poststop in jail_dir first,
# else use jail exec_<type> property unchanged
__findscript () {
    local _dataset _type _mountpoint
    
    _dataset=${1}
    _type=${2}

    _mountpoint=$(__get_dataset_zfs_prop mountpoint ${_dataset})

    if [ -x "${_mountpoint}/${_type}" ]; then
        echo "${_mountpoint}/${_type}"
    else
        echo $(__get_dataset_ioc_prop exec_${_type} ${_dataset})
    fi
}

__is_running () {
    local _fulluuid
    
    _fulluuid=${1}

    jls name | grep -q ioc-${_fulluuid}
}
