#!/bin/sh

__start_jail () {
    local _dataset _fulluuid _template _nics _i _nic _bridge _jail_hostid \
          _tag _jail_type _mountpoint _procfs _jzfs _jzfs_dataset _vnet _cpuset

    # Temporary until terminal detection is implemented globally.
    local _OK _FAILED
    _OK="\e[32mOK\e[0m"
    _FAILED="\e[31mFAILED\e[0m"

    _dataset=${1}

    _fulluuid=$(__get_dataset_ioc_prop host_hostuuid ${_dataset})
    if __is_running ${_fulluuid} ; then
        echo "[${_fulluuid}] Jail is already up"
        exit 1
    fi

    _template=$(__get_dataset_ioc_prop template ${_dataset})
    if [ "${_template}" = "yes" ] ; then
        return 0
    fi

    _nics=$(__get_dataset_ioc_prop interfaces ${_dataset} | tr ',' ' ')
    for _i in ${_nics} ; do
        _nic=${_i%%:*}
        _bridge=${_i#*:}

        if [ -z "${_nic}" ] || [ -z "${_bridge}" ] ; then
            echo "  ERROR  : incorrect interfaces property format"
            echo "  HINT   : check with \"iocage get interfaces ${_fulluuid}\""
            echo "  Example: vnet0:bridge0"
            exit 1
        fi
    done

    _jail_hostid=$(__get_dataset_ioc_prop hostid ${_dataset})
    if [ "${_jail_hostid}" != "${hostid}" ] ; then
        echo "ERROR: hostid mismatch, start failed!"
        echo "    jail hostid: ${_jail_hostid}"
        echo "  host's hostid: ${hostid}"
        exit 1
    fi

    _tag=$(__get_dataset_ioc_prop tag ${_dataset})
    echo "[${_fulluuid}] Starting (tag: \"${_tag}\")"

    echo "[${_fulluuid}] Preparing filesystems"

    _jail_type=$(__get_dataset_ioc_prop type ${_dataset})
    if [ "${_jail_type}" = "basejail" ] ; then
        # Re-clone required filesystems
        __reclone_basejail ${_dataset}
    fi

    __update_mountpoint ${_dataset}
    _mountpoint=$(__get_dataset_zfs_prop mountpoint ${_dataset})

    mkdir -p /tmp/iocage

    sed -e "s|%jailroot%|${_mountpoint}/root|g" < ${_mountpoint}/fstab \
        > /tmp/iocage/fstab.${_fulluuid}

    _procfs=$(__get_dataset_ioc_prop mount_procfs ${_dataset})
    if [ "${_procfs}" -eq 1 ] ; then
        mount -t procfs proc ${_mountpoint}/root/proc
    fi

    _jzfs=$(__get_dataset_ioc_prop jail_zfs ${_dataset})
    if [ "${_jzfs}" = "on" ] ; then
        _jzfs_dataset=$(__get_dataset_ioc_prop jail_zfs_dataset ${_dataset})
        __set_dataset_ioc_prop allow_mount=1 ${_dataset}
        __set_dataset_ioc_prop enforce_statfs=1 ${_dataset}
        __set_dataset_ioc_prop allow_mount_zfs=1 ${_dataset}
        __set_dataset_zfs_prop jailed=on ${pool}/${_jzfs_dataset}
    fi

    echo -e "[${_fulluuid}] Preparing filesystems ${_OK}"

    _vnet=$(__get_dataset_ioc_prop vnet ${_dataset})
    if [ "${_vnet}" = "on" -o "${_vnet}" = "-" ] ; then
        if [ -n $(sysctl -qn kern.features.vimage) ] ; then
            echo "[${_fulluuid}] Starting jail (VNET mode)"
            __vnet_start ${_dataset}
            if [ ${?} -eq 0 ] ; then
                echo -e "[${_fulluuid}] Starting jail (VNET mode) ${_OK}"
            else
                echo -e "[${_fulluuid}] Starting jail (VNET mode) ${_FAILED}"
                exit 1
            fi

            echo "[${_fulluuid}] Configuring VNET"
            __networking start ${_dataset}
            if [ ${?} -eq 0 ] ; then
                echo -e "[${_fulluuid}] Configuring VNET ${_OK}"
            else
                echo -e "[${_fulluuid}] Configuring VNET ${_FAILED}"
            fi
        else
            echo "  ERROR: start failed for ${_fulluuid} (${_tag})"
            echo "  vnet=on but kernel is not VNET capable!"
            echo "  Turn vnet off for this jail or recompile kernel with VNET."
            exit 1
        fi
    else
        echo "[${_fulluuid}] Starting jail (shared IP mode)"
        __legacy_start ${_dataset}
        if [ ${?} -eq 0 ] ; then
            echo -e "[${_fulluuid}] Starting jail (shared IP mode) ${_OK}"
        else
            echo -e "[${_fulluuid}] Starting jail (shared IP mode) ${_FAILED}"
        fi
    fi

    cd ${_mountpoint}/root/dev && ln -s ../var/run/log log

    __rctl_limits ${_dataset}

    _cpuset=$(__get_dataset_ioc_prop cpuset ${_dataset})
    if [ "${_cpuset}" != "off" ] ; then
        echo "[${_fulluuid}] Setting CPU affinity"
        _jid=$(jls -j ioc-${_fulluuid} jid)
        cpuset -l ${_cpuset} -j ${_jid}
        if [ ${?} -eq 0 ] ; then
            echo -e "[${_fulluuid}] Setting CPU affinity ${_OK}"
        else
            echo -e "[${_fulluuid}] Setting CPU affinity ${_FAILED}"
        fi
    fi

    if [ "${_jzfs}" = "on" ] ; then
        zfs jail ioc-${_fulluuid} ${pool}/${_jzfs_dataset}
    fi

    __resolv_conf ${_dataset}

    echo "[${_fulluuid}] Starting services"
    jexec ioc-${_fulluuid} $(__get_dataset_ioc_prop exec_start ${_dataset}) \
        >> ${iocroot}/log/${_fulluuid}-console.log 2>&1
    if [ ${?} -eq 0 ] ; then
        echo -e "[${_fulluuid}] Starting services ${_OK}"
    else
        echo -e "[${_fulluuid}] Starting services ${_FAILED}"
    fi

    __set_dataset_ioc_prop last_started=$(date "+%F_%T") ${_dataset}
}

# Start a VNET jail
__vnet_start () {
    local _dataset _uuid _mountpoint _tmpfs _fdescfs

    _dataset=${1}

    _uuid=$(__get_dataset_ioc_prop host_hostuuid ${_dataset})
    _mountpoint=$(__get_dataset_zfs_prop mountpoint ${_dataset})

    if [ "$(uname -U)" = "903000" ] ; then
      _tmpfs=""
      _fdescfs=""
    else
      _tmpfs="allow.mount.tmpfs=$(__get_dataset_ioc_prop allow_mount_tmpfs \
                                                         ${_dataset})"
      _fdescfs="mount.fdescfs=$(__get_dataset_ioc_prop mount_fdescfs \
                                                       ${_dataset})"
    fi

    jail -c vnet \
         name="ioc-${_uuid}" \
         host.hostname="$(__get_dataset_ioc_prop hostname ${_dataset})" \
         path="${_mountpoint}/root" \
         securelevel="$(__get_dataset_ioc_prop securelevel ${_dataset})" \
         host.hostuuid="${_uuid}" \
         devfs_ruleset="$(__get_dataset_ioc_prop devfs_ruleset ${_dataset})" \
         enforce_statfs="$(__get_dataset_ioc_prop enforce_statfs ${_dataset})" \
         children.max="$(__get_dataset_ioc_prop children_max ${_dataset})" \
         allow.set_hostname="$(__get_dataset_ioc_prop allow_set_hostname \
                                                      ${_dataset})" \
         allow.sysvipc="$(__get_dataset_ioc_prop allow_sysvipc \
                                                 ${_dataset})" \
         allow.raw_sockets="$(__get_dataset_ioc_prop allow_raw_sockets \
                                                     ${_dataset})" \
         allow.chflags="$(__get_dataset_ioc_prop allow_chflags ${_dataset})" \
         allow.mount="$(__get_dataset_ioc_prop allow_mount ${_dataset})" \
         allow.mount.devfs="$(__get_dataset_ioc_prop allow_mount_devfs \
                                                     ${_dataset})" \
         allow.mount.nullfs="$(__get_dataset_ioc_prop allow_mount_nullfs \
                                                      ${_dataset})" \
         allow.mount.procfs="$(__get_dataset_ioc_prop allow_mount_procfs \
                                                      ${_dataset})" \
         "${_tmpfs}" \
         allow.mount.zfs="$(__get_dataset_ioc_prop allow_mount_zfs \
                                                   ${_dataset})" \
         allow.quotas="$(__get_dataset_ioc_prop allow_quotas ${_dataset})" \
         allow.socket_af="$(__get_dataset_ioc_prop allow_socket_af \
                                                   ${_dataset})" \
         exec.prestart="$(__findscript ${_dataset} prestart)" \
         exec.poststart="$(__findscript ${_dataset} poststart)" \
         exec.prestop="$(__findscript ${_dataset} prestop)" \
         exec.stop="$(__get_dataset_ioc_prop exec_stop ${_dataset})" \
         exec.clean="$(__get_dataset_ioc_prop exec_clean ${_dataset})" \
         exec.timeout="$(__get_dataset_ioc_prop exec_timeout ${_dataset})" \
         stop.timeout="$(__get_dataset_ioc_prop stop_timeout ${_dataset})" \
         mount.fstab="/tmp/iocage/fstab.${_uuid}" \
         mount.devfs="$(__get_dataset_ioc_prop mount_devfs ${_dataset})" \
         "${_fdescfs}" \
         allow.dying \
         exec.consolelog="${iocroot}/log/${_uuid}-console.log" \
         persist
}

# Start a shared IP jail
__legacy_start () {
    local _dataset _uuid _mountpoint _ip4_addr_prop _ip6_addr_prop \
          _autoip4 _default_iface _ip4_addr _ip6_addr _ip4 _ip6 \
          _ip4_addr_propline _ip6_addr_propline _fdescfs _tmpfs _ip6_addrsel

    _dataset=${1}

    _uuid=$(__get_dataset_ioc_prop host_hostuuid ${_dataset})
    _mountpoint=$(__get_dataset_zfs_prop mountpoint ${_dataset})
    _ip4_addr_prop=$(__get_dataset_ioc_prop ip4_addr ${_dataset})
    _ip6_addr_prop=$(__get_dataset_ioc_prop ip6_addr ${_dataset})

    # Replace DEFAULT with the actual default interface name if needed
    _default_iface=$(netstat -f inet -nrW | awk '/^default/ { print $6 }')
    _ip4_addr=$(__sub_default_iface ${_default_iface} "${_ip4_addr_prop}")
    _ip6_addr=$(__sub_default_iface ${_default_iface} "${_ip6_addr_prop}")

    _ip4=$(__get_dataset_ioc_prop ip4 ${_dataset})

    # This is mostly a temporary workaround for
    # https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=196474
    if [ "${_ip4}" = "inherit" ] ; then
        _ip4="inherit"
        _ip6="inherit"
        _ip4_addr_propline=""
        _ip6_addr_propline=""
    else
        _ip6=$(__get_dataset_ioc_prop ip6 ${_dataset})
        _ip4_addr_propline="ip4.addr=${_ip4_addr}"
        _ip6_addr_propline="ip6.addr=${_ip6_addr}"
    fi

    if [ "$(uname -U)" = "903000" ];
    then
      _fdescfs=""
      _tmpfs=""
    else
        _fdescfs="mount.fdescfs=$(__get_dataset_ioc_prop mount_fdescfs \
                                                         ${_dataset})"
        _tmpfs="allow.mount.tmpfs=$(__get_dataset_ioc_prop allow_mount_tmpfs \
                                                           ${_dataset})"
    fi

    if [ "${ipv6}" = "on" ] ; then
        _ip6_addrsel=$(__get_dataset_ioc_prop ip6_saddrsel ${_dataset})
        _ip6_props="${_ip6_addr_propline} \
                    ip6.saddrsel=${_ip6_addrsel} \
                    ip6=${_ip6}"
    else
        _ip6_props=""
    fi

    jail -c \
         ${_ip4_addr_propline} \
         ip4.saddrsel="$(__get_dataset_ioc_prop ip4_saddrsel ${_dataset})" \
         ip4="${_ip4}" \
         ${_ip6_props} \
         name="ioc-${_uuid}" \
         host.hostname="$(__get_dataset_ioc_prop hostname ${_dataset})" \
         path="${_mountpoint}/root" \
         securelevel="$(__get_dataset_ioc_prop securelevel ${_dataset})" \
         host.hostuuid="${_uuid}" \
         devfs_ruleset="$(__get_dataset_ioc_prop devfs_ruleset ${_dataset})" \
         enforce_statfs="$(__get_dataset_ioc_prop enforce_statfs ${_dataset})" \
         children.max="$(__get_dataset_ioc_prop children_max ${_dataset})" \
         allow.set_hostname="$(__get_dataset_ioc_prop allow_set_hostname \
                                                      ${_dataset})" \
         allow.sysvipc="$(__get_dataset_ioc_prop allow_sysvipc ${_dataset})" \
         allow.raw_sockets="$(__get_dataset_ioc_prop allow_raw_sockets \
                                                     ${_dataset})" \
         allow.chflags="$(__get_dataset_ioc_prop allow_chflags ${_dataset})" \
         allow.mount="$(__get_dataset_ioc_prop allow_mount ${_dataset})" \
         allow.mount.devfs="$(__get_dataset_ioc_prop allow_mount_devfs \
                                                     ${_dataset})" \
         allow.mount.nullfs="$(__get_dataset_ioc_prop allow_mount_nullfs \
                                                      ${_dataset})" \
         allow.mount.procfs="$(__get_dataset_ioc_prop allow_mount_procfs \
                                                      ${_dataset})" \
         "${_tmpfs}" \
         allow.mount.zfs="$(__get_dataset_ioc_prop allow_mount_zfs \
                                                   ${_dataset})" \
         allow.quotas="$(__get_dataset_ioc_prop allow_quotas ${_dataset})" \
         allow.socket_af="$(__get_dataset_ioc_prop allow_socket_af \
                                                   ${_dataset})" \
         exec.prestart="$(__findscript ${_dataset} prestart)" \
         exec.poststart="$(__findscript ${_dataset} poststart)" \
         exec.prestop="$(__findscript ${_dataset} prestop)" \
         exec.stop="$(__get_dataset_ioc_prop exec_stop ${_dataset})" \
         exec.clean="$(__get_dataset_ioc_prop exec_clean ${_dataset})" \
         exec.timeout="$(__get_dataset_ioc_prop exec_timeout ${_dataset})" \
         stop.timeout="$(__get_dataset_ioc_prop stop_timeout ${_dataset})" \
         mount.fstab="/tmp/iocage/fstab.${_uuid}" \
         mount.devfs="$(__get_dataset_ioc_prop mount_devfs ${_dataset})" \
         "${_fdescfs}" \
         allow.dying \
         exec.consolelog="${iocroot}/log/${_uuid}-console.log" \
         persist
}

__stop_jail () {
    local _dataset _fulluuid _tag _exec_prestop _exec_stop _vnet _ip4 \
          _exec_poststop _mountpoint _rlimits

    # Temporary until terminal detection is implemented globally.
    local _OK _FAILED
    _OK="\e[32mOK\e[0m"
    _FAILED="\e[31mFAILED\e[0m"

    _dataset=${1}

    _fulluuid=$(__get_dataset_ioc_prop host_hostuuid ${_dataset})

    if ! __is_running ${_fulluuid} ; then
        echo "[${_fulluuid}] Jail is already down"
        exit 1
    fi

    _tag=$(__get_dataset_ioc_prop tag ${_dataset})
    _exec_prestop=$(__findscript ${_dataset} prestop)

    echo "[${_fulluuid}] Stopping (tag: \"${_tag}\")"

    echo "[${_fulluuid}] Running pre-stop"
    eval "${_exec_prestop}"
    if [ ${?} -eq 0 ] ; then
        echo -e "[${_fulluuid}] Running pre-stop ${_OK}"
    else
        echo -e "[${_fulluuid}] Running pre-stop ${_FAILED}"
    fi

    _exec_stop=$(__get_dataset_ioc_prop exec_stop ${_dataset})

    echo "[${_fulluuid}] Stopping services"
    jexec ioc-${_fulluuid} ${_exec_stop} \
        >> ${iocroot}/log/${_fulluuid}-console.log 2>&1
    if [ ${?} -eq 0 ] ; then
        echo -e "[${_fulluuid}] Stopping services ${_OK}"
    else
        echo -e "[${_fulluuid}] Stopping services ${_FAILED}"
    fi

    _vnet=$(__get_dataset_ioc_prop vnet ${_dataset})

    if [ "${_vnet}" = "on" ] ; then
        echo "[${_fulluuid}] Tearing down VNET"
        __networking stop ${_dataset}
        if [ ${?} -eq 0 ] ; then
            echo -e "[${_fulluuid}] Tearing down VNET ${_OK}"
        else
            echo -e "[${_fulluuid}] Tearing down VNET ${_FAILED}"
        fi
    else
        _ip4=$(__get_dataset_ioc_prop ip4 ${_dataset})

        # don't try to tear down networking if we have "inherit" set
        if [ "${_ip4}" != "inherit" ] ; then
            echo "[${_fulluuid}] Stopping legacy networking"
            __stop_legacy_networking ${_dataset}
            if [ ${?} -eq 0 ] ; then
                echo -e "[${_fulluuid}] Stopping legacy networking ${_OK}"
            else
                echo -e "[${_fulluuid}] Stopping legacy networking ${_FAILED}"
            fi
        fi
    fi

    echo "[${_fulluuid}] Removing jail processes"
    jail -r ioc-${_fulluuid}

    if [ ${?} -eq 0 ] ; then
        echo -e "[${_fulluuid}] Removing jail processes ${_OK}"
    else
        echo -e "[${_fulluuid}] Removing jail processes ${_FAILED}"
    fi

    _exec_poststop=$(__findscript ${_dataset} poststop)

    echo "[${_fulluuid}] Running post-stop"
    eval "${_exec_poststop}"
    if [ ${?} -eq 0 ] ; then
        echo -e "[${_fulluuid}] Running post-stop ${_OK}"
    else
        echo -e "[${_fulluuid}] Running post-stop ${_FAILED}"
    fi

    echo "[${_fulluuid}] Unmounting filesystems"

    _mountpoint=$(__get_dataset_zfs_prop mountpoint ${_dataset})

    umount -afvF /tmp/iocage/fstab.${_fulluuid} > /dev/null 2>&1
    umount ${_mountpoint}/root/dev/fd > /dev/null 2>&1
    umount ${_mountpoint}/root/dev    > /dev/null 2>&1
    umount ${_mountpoint}/root/proc   > /dev/null 2>&1

    if [ -d ${iocroot}/jails/${_fulluuid}/recorded ] ; then
        umount -ft unionfs ${iocroot}/jails/${_fulluuid}/root > /dev/null 2>&1
    fi

    echo -e "[${_fulluuid}] Unmounting filesystems ${_OK}"

    if [ -n $(sysctl -qn kern.features.rctl) ] ; then
        _rlimits=$(rctl | grep -c ${_fulluuid})
        if [ "${_rlimits}" -gt 0 ] ; then
            rctl -r jail:ioc-${_fulluuid}
        fi
    fi
}

# Soft restart
__restart_jail () {
    local _dataset _fulluuid _exec_stop _exec_start _jid _tag _date

    _dataset=${1}

    _fulluuid=$(__get_dataset_ioc_prop host_hostuuid ${_dataset})
    _exec_stop=$(__get_dataset_ioc_prop exec_stop ${_dataset})
    _tag=$(__get_dataset_ioc_prop tag ${_dataset})

    echo "[${_fulluuid}] Soft restarting (tag: \"${_tag}\")"

    jexec ioc-${_fulluuid} ${_exec_stop} \
        >> ${iocroot}/log/${_fulluuid}-console.log 2>&1
    [ ${?} -eq 0 ] ||
        __fatal_error "Soft restart failed."

    _jid=$(jls -j ioc-${_fulluuid} jid)
    _exec_start=$(__get_dataset_ioc_prop exec_start ${_dataset})
    _date=$(date "+%F_%T")

    pkill -j ${_jid}
    jexec ioc-${_fulluuid} ${_exec_start} \
        >> ${iocroot}/log/${_fulluuid}-console.log 2>&1
    __set_dataset_ioc_prop last_started=${_date} ${_dataset}
}

# Hard restart
__restart_hard_jail () {
    local _dataset

    _dataset=${1}

    __stop_jail ${_dataset}
    __start_jail ${_dataset}
}

__rc_jails () {
    local _action _jails _boot_list _jail _boot _priority _previous_priority \
          _boot_order _i _dataset _uuid _shutdown_order

    _action=${1}
    _jails=$(__find_jail ALL)
    _boot_list=""

    for _jail in ${_jails} ; do
        _boot=$(__get_dataset_ioc_prop boot ${_jail})

        if [ "${_boot}" = "on" ] ; then
            _priority=$(__get_dataset_ioc_prop priority ${_jail})
            _boot_list="${_boot_list}
                        ${_priority},${_jail}"
        fi
    done

    [ -n "${_boot_list}" ] ||
        __fatal_error "None of the jails have boot on."

    _previous_priority=0

    if [ "${_action}" = "boot" ] ; then
        _boot_order=$(echo "${_boot_list}" | awk NF | sort -nb)

        echo "* [I|O|C] booting jails... "

        for _i in ${_boot_order} ; do
            _priority=${_i%%,*}
            _dataset=${_i#*,}
            _uuid=${_dataset##*/}

            if [ ${_priority} -ne ${_previous_priority} ] ; then
                wait
            fi

            if ! __is_running ${_uuid} ; then
                __start_jail ${_dataset} &
            fi

            _previous_priority=${_priority}
        done

    elif [ "${_action}" = "shutdown" ] ; then
        _shutdown_order=$(echo "${_boot_list}" | awk NF | sort -rnb)

        echo "* [I|O|C] shutting down jails... "

        for _i in ${_shutdown_order} ; do
            _priority=${_i%%,*}
            _dataset=${_i#*,}
            _uuid=${_dataset##*/}

            if [ ${_priority} -ne ${_previous_priority} ] ; then
                wait
            fi

            if __is_running ${_uuid} ; then
                __stop_jail ${_dataset} &
            fi

            _previous_priority=${_priority}
        done

    fi

    wait
}
