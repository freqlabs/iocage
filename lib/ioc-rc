#!/bin/sh

__start_jail () {
    local _name _dataset _fulluuid _jail_type _tag _jail_hostid _mountpoint
    local _template _cpuset _procfs _vnet _nics _i _nic _bridge
    local _jzfs _jzfs_dataset _jid
    
    _name=${1}

    _dataset=$(__find_jail ${_name})
    __check_dataset "${_dataset}" ${_name}

    _fulluuid=$(__get_dataset_ioc_prop host_hostuuid ${_dataset})

    __hack88_mount ${_fulluuid}

    _jail_type=$(__get_dataset_ioc_prop type ${_dataset})
    _tag=$(__get_dataset_ioc_prop tag ${_dataset})
    _jail_hostid=$(__get_dataset_ioc_prop hostid ${_dataset})
    _mountpoint=$(__get_dataset_zfs_prop mountpoint ${_dataset})
    _template=$(__get_dataset_ioc_prop template ${_dataset})
    _cpuset=$(__get_dataset_ioc_prop cpuset ${_dataset})
    _procfs=$(__get_dataset_ioc_prop mount_procfs ${_dataset})
    _vnet=$(__get_dataset_ioc_prop vnet ${_dataset})
    _nics=$(__get_dataset_ioc_prop interfaces ${_dataset} | tr ',' ' ')

    if __is_running ${_fulluuid} ; then
        echo "* ${_fulluuid}: is already up"
        exit 1
    fi

    if [ "${_jail_type}" == "basejail" ] ; then
        # Re-clone required filesystems
        __reclone_basejail ${_dataset}
    fi

    if [ "${_template}" == "yes" ] ; then
        return
    fi

    for _i in ${_nics} ; do
        _nic=${_i%%:*}
        _bridge=${_i#*:}

        if [ -z "${_nic}" ] || [ -z "${_bridge}" ] ; then
            echo "  ERROR  : incorrect interfaces property format"
            echo "  HINT   : check with \"iocage get interfaces ${_fulluuid}\""
            echo "  Example: vnet0:bridge0"
            exit 1
        fi
    done

    if [ "${_jail_hostid}" != "${hostid}" ] ; then
        echo "ERROR: hostid mismatch, start failed!"
        echo "    jail hostid: ${_jail_hostid}"
        echo "  host's hostid: ${hostid}"
        exit 1
    fi

    if [ "${_procfs}" -eq 1 ] ; then
        mount -t procfs proc ${_mountpoint}/root/proc
    fi

    _jzfs=$(__get_dataset_ioc_prop jail_zfs ${_dataset})
    _jzfs_dataset=$(__get_dataset_ioc_prop jail_zfs_dataset ${_dataset})

    if [ "${_jzfs}" == "on" ] ; then
        __set_dataset_ioc_prop allow_mount=1 ${_dataset}
        __set_dataset_ioc_prop enforce_statfs=1 ${_dataset}
        __set_dataset_ioc_prop allow_mount_zfs=1 ${_dataset}
        __set_dataset_zfs_prop jailed=on ${pool}/${_jzfs_dataset}
    fi

    if [ "${_vnet}" == "on" ] || [ "${_vnet}" == "-" ] ; then
        if [ -n $(sysctl -qn kern.features.vimage) ] ; then
            echo "* Starting ${_fulluuid} (${_tag})"
            __vnet_start ${_dataset}
            if [ ${?} -eq 0 ] ; then
                echo "  + Started                  OK"
            else
                echo "  ! Start                FAILED"
                exit 1
            fi
            
            echo -n "  + Configuring VNET"
            __networking start ${_dataset}
            if [ ${?} -eq 0 ] ; then
                echo "         OK"
            else
                echo "         FAILED"
            fi
        else
            echo "  ERROR: start failed for ${_fulluuid}"
            echo "  vnet=on but kernel is not VNET capable!"
            echo "  Turn vnet off for this jail or recompile kernel with VNET."
            exit 1
        fi
    else
        echo "* Starting ${_fulluuid} (${_tag})"
        __legacy_start ${_dataset}
        if [ ${?} -eq 0 ] ; then
            echo "  + Started (shared IP mode) OK"
        else
            echo "  ! Start                FAILED"
        fi
    fi

    cd ${_mountpoint}/root/dev && ln -s ../var/run/log log

    __rctl_limits ${_fulluuid}

    if [ "${_cpuset}" != "off" ] ; then
        echo -n "  + Appliyng CPU affinity"
        _jid=$(jls -j ioc-${_fulluuid} jid)
        cpuset -l ${_cpuset} -j ${_jid}
        if [ ${?} -eq 0 ] ; then
            echo "    OK"
        else
            echo "    FAILED"
        fi
    fi

    if [ "${_jzfs}" == "on" ] ; then
        zfs jail ioc-${_fulluuid} ${pool}/${_jzfs_dataset}
    fi

    __resolv_conf ${_fulluuid} > ${_mountpoint}/root/etc/resolv.conf

    echo -n "  + Starting services"
    jexec ioc-${_fulluuid} $(__get_dataset_ioc_prop exec_start ${_dataset}) \
          >> ${iocroot}/log/${_fulluuid}-console.log 2>&1
    if [ ${?} -eq 0 ] ; then
        echo "        OK"
    else
        echo "        FAILED"
    fi

    __set_dataset_ioc_prop last_started=$(date "+%F_%T") ${_dataset}
}

# Start a VNET jail
__vnet_start () {
    local _dataset _uuid _mountpoint _tmpfs _fdescfs

    _dataset=${1}

    _uuid=$(__get_dataset_ioc_prop host_hostuuid ${_dataset})
    _mountpoint=$(__get_dataset_zfs_prop mountpoint ${_dataset})

    if [ "$(uname -U)" == "903000" ] ; then
      _tmpfs=""
      _fdescfs=""
    else
      _tmpfs="allow.mount.tmpfs=$(__get_dataset_ioc_prop allow_mount_tmpfs ${_dataset})"
      _fdescfs="mount.fdescfs=$(__get_dataset_ioc_prop mount_fdescfs ${_dataset})"
    fi
    
    jail -c vnet \
         name="ioc-${_uuid}" \
         host.hostname="$(__get_dataset_ioc_prop hostname ${_dataset})" \
         path="${_mountpoint}/root" \
         securelevel="$(__get_dataset_ioc_prop securelevel ${_dataset})" \
         host.hostuuid="${_uuid}" \
         devfs_ruleset="$(__get_dataset_ioc_prop devfs_ruleset ${_dataset})" \
         enforce_statfs="$(__get_dataset_ioc_prop enforce_statfs ${_dataset})" \
         children.max="$(__get_dataset_ioc_prop children_max ${_dataset})" \
         allow.set_hostname="$(__get_dataset_ioc_prop allow_set_hostname ${_dataset})" \
         allow.sysvipc="$(__get_dataset_ioc_prop allow_sysvipc ${_dataset})" \
         allow.raw_sockets="$(__get_dataset_ioc_prop allow_raw_sockets ${_dataset})" \
         allow.chflags="$(__get_dataset_ioc_prop allow_chflags ${_dataset})" \
         allow.mount="$(__get_dataset_ioc_prop allow_mount ${_dataset})" \
         allow.mount.devfs="$(__get_dataset_ioc_prop allow_mount_devfs ${_dataset})" \
         allow.mount.nullfs="$(__get_dataset_ioc_prop allow_mount_nullfs ${_dataset})" \
         allow.mount.procfs="$(__get_dataset_ioc_prop allow_mount_procfs ${_dataset})" \
         "${_tmpfs}" \
         allow.mount.zfs="$(__get_dataset_ioc_prop allow_mount_zfs ${_dataset})" \
         allow.quotas="$(__get_dataset_ioc_prop allow_quotas ${_dataset})" \
         allow.socket_af="$(__get_dataset_ioc_prop allow_socket_af ${_dataset})" \
         exec.prestart="$(__findscript ${_uuid} prestart)" \
         exec.poststart="$(__findscript ${_uuid} poststart)" \
         exec.prestop="$(__findscript ${_uuid} prestop)" \
         exec.stop="$(__get_dataset_ioc_prop exec_stop ${_dataset})" \
         exec.clean="$(__get_dataset_ioc_prop exec_clean ${_dataset})" \
         exec.timeout="$(__get_dataset_ioc_prop exec_timeout ${_dataset})" \
         stop.timeout="$(__get_dataset_ioc_prop stop_timeout ${_dataset})" \
         mount.fstab="${_mountpoint}/fstab" \
         mount.devfs="$(__get_dataset_ioc_prop mount_devfs ${_dataset})" \
         "${_fdescfs}" \
         allow.dying \
         exec.consolelog="${iocroot}/log/${_uuid}-console.log" \
         persist
}

# Start a shared IP jail
__legacy_start () {
    local _dataset _uuid _mountpoint _ip4_addr _ip6_addr _ip4 _fdescfs _tmpfs
    local _ip6 _ip4_addr_propline _ip6_addr_propline

    _dataset=${1}

    _uuid=$(__get_dataset_ioc_prop host_hostuuid ${_dataset})
    _mountpoint=$(__get_dataset_zfs_prop mountpoint ${_dataset})
    _ip4_addr=$(__get_dataset_ioc_prop ip4_addr ${_dataset})
    _ip6_addr=$(__get_dataset_ioc_prop ip6_addr ${_dataset})
    _ip4=$(__get_dataset_ioc_prop ip4 ${_dataset})

    if [ "$(uname -U)" == "903000" ];
    then
      _fdescfs=""
      _tmpfs=""
    else
        _fdescfs="mount.fdescfs=$(__get_dataset_ioc_prop mount_fdescfs ${_dataset})"
        _tmpfs="allow.mount.tmpfs=$(__get_dataset_ioc_prop allow_mount_tmpfs ${_dataset})"
    fi

    if [ "${_ip4_addr}" == "none" ] ; then
        _ip4_addr=""
    fi

    if [ "${_ip6_addr}" == "none" ] ; then
        _ip6_addr=""
    fi

    # this is mostly a temporary workaround for https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=196474
    if [ "${_ip4}" == "inherit" ] ; then
        _ip4="inherit"
        _ip6="inherit"
        _ip4_addr_propline=""
        _ip6_addr_propline=""
    else
        _ip6=$(__get_dataset_ioc_prop ip6 ${_dataset})
        _ip4_addr_propline="ip4.addr=${_ip4_addr}"
        _ip6_addr_propline="ip6.addr=${_ip6_addr}"
    fi

    if [ "${ipv6}" == "on" ] ; then
        jail -c \
             "${_ip4_addr_propline}" \
             ip4.saddrsel="$(__get_dataset_ioc_prop ip4_saddrsel ${_dataset})" \
             ip4="${_ip4}" \
             "${_ip6_addr_propline}" \
             ip6.saddrsel="$(__get_dataset_ioc_prop ip6_saddrsel ${_dataset})" \
             ip6="${_ip6}" \
             name="ioc-${_uuid}" \
             host.hostname="$(__get_dataset_ioc_prop hostname ${_dataset})" \
             path="${_mountpoint}/root" \
             securelevel="$(__get_dataset_ioc_prop securelevel ${_dataset})" \
             host.hostuuid="${_uuid}" \
             devfs_ruleset="$(__get_dataset_ioc_prop devfs_ruleset ${_dataset})" \
             enforce_statfs="$(__get_dataset_ioc_prop enforce_statfs ${_dataset})" \
             children.max="$(__get_dataset_ioc_prop children_max ${_dataset})" \
             allow.set_hostname="$(__get_dataset_ioc_prop allow_set_hostname ${_dataset})" \
             allow.sysvipc="$(__get_dataset_ioc_prop allow_sysvipc ${_dataset})" \
             allow.raw_sockets="$(__get_dataset_ioc_prop allow_raw_sockets ${_dataset})" \
             allow.chflags="$(__get_dataset_ioc_prop allow_chflags ${_dataset})" \
             allow.mount="$(__get_dataset_ioc_prop allow_mount ${_dataset})" \
             allow.mount.devfs="$(__get_dataset_ioc_prop allow_mount_devfs ${_dataset})" \
             allow.mount.nullfs="$(__get_dataset_ioc_prop allow_mount_nullfs ${_dataset})" \
             allow.mount.procfs="$(__get_dataset_ioc_prop allow_mount_procfs ${_dataset})" \
             "${_tmpfs}" \
             allow.mount.zfs="$(__get_dataset_ioc_prop allow_mount_zfs ${_dataset})" \
             allow.quotas="$(__get_dataset_ioc_prop allow_quotas ${_dataset})" \
             allow.socket_af="$(__get_dataset_ioc_prop allow_socket_af ${_dataset})" \
             exec.prestart="$(__findscript ${_uuid} prestart)" \
             exec.poststart="$(__findscript ${_uuid} poststart)" \
             exec.prestop="$(__findscript ${_uuid} prestop)" \
             exec.stop="$(__get_dataset_ioc_prop exec_stop ${_dataset})" \
             exec.clean="$(__get_dataset_ioc_prop exec_clean ${_dataset})" \
             exec.timeout="$(__get_dataset_ioc_prop exec_timeout ${_dataset})" \
             stop.timeout="$(__get_dataset_ioc_prop stop_timeout ${_dataset})" \
             mount.fstab="${_mountpoint}/fstab" \
             mount.devfs="$(__get_dataset_ioc_prop mount_devfs ${_dataset})" \
             "${_fdescfs}" \
             allow.dying \
             exec.consolelog="${iocroot}/log/${_uuid}-console.log" \
             persist
    else
        jail -c \
             "${_ip4_addr_propline}" \
             ip4.saddrsel="$(__get_dataset_ioc_prop ip4_saddrsel ${_dataset})" \
             ip4="${_ip4}" \
             name="ioc-${_uuid}" \
             host.hostname="$(__get_dataset_ioc_prop hostname ${_dataset})" \
             path="${_mountpoint}/root" \
             securelevel="$(__get_dataset_ioc_prop securelevel ${_dataset})" \
             host.hostuuid="${_uuid}" \
             devfs_ruleset="$(__get_dataset_ioc_prop devfs_ruleset ${_dataset})" \
             enforce_statfs="$(__get_dataset_ioc_prop enforce_statfs ${_dataset})" \
             children.max="$(__get_dataset_ioc_prop children_max ${_dataset})" \
             allow.set_hostname="$(__get_dataset_ioc_prop allow_set_hostname ${_dataset})" \
             allow.sysvipc="$(__get_dataset_ioc_prop allow_sysvipc ${_dataset})" \
             allow.raw_sockets="$(__get_dataset_ioc_prop allow_raw_sockets ${_dataset})" \
             allow.chflags="$(__get_dataset_ioc_prop allow_chflags ${_dataset})" \
             allow.mount="$(__get_dataset_ioc_prop allow_mount ${_dataset})" \
             allow.mount.devfs="$(__get_dataset_ioc_prop allow_mount_devfs ${_dataset})" \
             allow.mount.nullfs="$(__get_dataset_ioc_prop allow_mount_nullfs ${_dataset})" \
             allow.mount.procfs="$(__get_dataset_ioc_prop allow_mount_procfs ${_dataset})" \
             "${_tmpfs}" \
             allow.mount.zfs="$(__get_dataset_ioc_prop allow_mount_zfs ${_dataset})" \
             allow.quotas="$(__get_dataset_ioc_prop allow_quotas ${_dataset})" \
             allow.socket_af="$(__get_dataset_ioc_prop allow_socket_af ${_dataset})" \
             exec.prestart="$(__findscript ${_uuid} prestart)" \
             exec.poststart="$(__findscript ${_uuid} poststart)" \
             exec.prestop="$(__findscript ${_uuid} prestop)" \
             exec.stop="$(__get_dataset_ioc_prop exec_stop ${_dataset})" \
             exec.clean="$(__get_dataset_ioc_prop exec_clean ${_dataset})" \
             exec.timeout="$(__get_dataset_ioc_prop exec_timeout ${_dataset})" \
             stop.timeout="$(__get_dataset_ioc_prop stop_timeout ${_dataset})" \
             mount.fstab="${_mountpoint}/fstab" \
             mount.devfs="$(__get_dataset_ioc_prop mount_devfs ${_dataset})" \
             "${_fdescfs}" \
             allow.dying \
             exec.consolelog="${iocroot}/log/${_uuid}-console.log" \
             persist
    fi
}

__stop_jail () {
    local _name _dataset _fulluuid _mountpoint _tag
    local _exec_prestop _exec_stop _exec_poststop
    local _vnet _ip4 _rlimits

    _name=${1}

    _dataset=$(__find_jail ${_name})
    __check_dataset "${_dataset}" ${_name}

    _fulluuid=$(__get_dataset_ioc_prop host_hostuuid ${_dataset})
    _mountpoint=$(__get_dataset_zfs_prop mountpoint ${_dataset})
    _tag=$(__get_dataset_ioc_prop tag ${_dataset})
    _exec_prestop=$(__findscript ${_fulluuid} prestop)
    _exec_stop=$(__get_dataset_ioc_prop exec_stop ${_dataset})
    _exec_poststop=$(__findscript ${_fulluuid} poststop)
    _vnet=$(__get_dataset_ioc_prop vnet ${_dataset})
    _ip4=$(__get_dataset_ioc_prop ip4 ${_dataset})

    if ! __is_running ${_fulluuid} ; then
        echo "* ${_fulluuid}: is already down"
        exit 1
    fi

    echo "* Stopping ${_fulluuid} (${_tag})"

    echo -n "  + Running pre-stop"
    eval "${_exec_prestop}"
    if [ ${?} -eq 0 ] ; then
        echo "         OK"
    else
        echo "     FAILED"
    fi

    echo -n "  + Stopping services"
    jexec ioc-${_fulluuid} ${_exec_stop} >> ${iocroot}/log/${_fulluuid}-console.log 2>&1
    if [ ${?} -eq 0 ] ; then
        echo "        OK"
    else
        echo "    FAILED"
    fi

    if [ "${_vnet}" == "on" ] ; then
        echo -n "  + Tearing down VNET"
        __networking stop ${_dataset}
        if [ ${?} -eq 0 ] ; then
            echo "        OK"
        else
            echo "        FAILED"
        fi
    else
        # don't try to tear down networking if we have "inherit" set
        if [ "${_ip4}" != "inherit" ] ; then
            __stop_legacy_networking ${_dataset}
        fi
    fi

    echo -n "  + Removing jail process"
    jail -r ioc-${_fulluuid}

    if [ ${?} -eq 0 ] ; then
        echo "    OK"
    else
        echo "FAILED"
    fi

    echo -n "  + Running post-stop"
    eval "${_exec_poststop}"
    if [ ${?} -eq 0 ] ; then
        echo "        OK"
    else
        echo "    FAILED"
    fi

    umount -afvF ${_mountpoint}/fstab > /dev/null 2>&1
    umount ${_mountpoint}/root/dev/fd > /dev/null 2>&1
    umount ${_mountpoint}/root/dev    > /dev/null 2>&1
    umount ${_mountpoint}/root/proc   > /dev/null 2>&1

    if [ -d ${iocroot}/jails/${_fulluuid}/recorded ] ; then
        umount -ft unionfs ${iocroot}/jails/${_fulluuid}/root > /dev/null 2>&1
    fi

    if [ -n $(sysctl -qn kern.features.rctl) ] ; then
        _rlimits=$(rctl | grep -c ${_fulluuid})
        if [ "${_rlimits}" -gt 0 ] ; then
            rctl -r jail:ioc-${_fulluuid}
        fi
    fi
}

# Soft restart
__restart_jail () {
    local _name _dataset _fulluuid _exec_stop _exec_start _jid _tag _date
    
    _name=${1}
    
    _dataset=$(__find_jail ${_name})
    __check_dataset "${_dataset}" ${_name}
    
    _fulluuid=$(__get_dataset_ioc_prop host_hostuuid ${_dataset})
    _exec_stop=$(__get_dataset_ioc_prop exec_stop ${_dataset})
    _tag=$(__get_dataset_ioc_prop tag ${_dataset})

    echo "* Soft restarting ${_fulluuid} (${_tag})"

    jexec ioc-${_fulluuid} ${_exec_stop} >> ${iocroot}/log/${_fulluuid}-console.log 2>&1
    [ ${?} -eq 0 ] ||
        __fatal_error "Soft restart failed."

    _jid=$(jls -j ioc-${_fulluuid} jid)
    _exec_start=$(__get_dataset_ioc_prop exec_start ${_dataset})
    _date=$(date "+%F_%T")

    pkill -j ${_jid}
    jexec ioc-${_fulluuid} ${_exec_start} >> ${iocroot}/log/${_fulluuid}-console.log 2>&1
    __set_dataset_ioc_prop last_started=${_date} ${_dataset}
}

__rc_jails () {
    local _action _jails _boot_list _jail _boot _priority _uuid
    local _boot_order _previous_priority _i _shutdown_order

    _action=${1}
    _jails=$(__find_jail ALL)
    _boot_list=""

    for _jail in ${_jails} ; do
        _boot=$(__get_dataset_ioc_prop boot ${_jail})

        if [ "${_boot}" == "on" ] ; then
            _priority=$(__get_dataset_ioc_prop priority ${_jail})
            _uuid=$(__get_dataset_ioc_prop host_hostuuid ${_jail})
            _boot_list="${_boot_list}
                        ${_priority},${_uuid}"
        fi
    done

    [ -n "${_boot_list}" ] ||
        __fatal_error "None of the jails have boot on."

    _previous_priority=0

    if [ "${_action}" == "boot" ] ; then
        _boot_order=$(echo "${_boot_list}" | awk NF | sort -nb)

        echo "* [I|O|C] booting jails... "

        for _i in ${_boot_order} ; do
            _priority=${_i%%,*}
            _uuid=${_i#*,}

            if [ ${_priority} -ne ${_previous_priority} ] ; then
                wait
            fi

            if ! __is_running ${_uuid} ; then
                __start_jail ${_uuid} &
            fi

            _previous_priority=${_priority}
        done

    elif [ "${_action}" == "shutdown" ] ; then
        _shutdown_order=$(echo "${_boot_list}" | awk NF | sort -rnb)

        echo "* [I|O|C] shutting down jails... "

        for _i in ${_shutdown_order} ; do
            _priority=${_i%%,*}
            _uuid=${_i#*,}

            if [ ${_priority} -ne ${_previous_priority} ] ; then
                wait
            fi

            if __is_running ${_uuid} ; then
                __stop_jail ${_uuid} &
            fi

            _previous_priority=${_priority}
        done

    fi

    wait
}
