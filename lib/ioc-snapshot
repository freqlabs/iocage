#!/bin/sh

__snapshot () {
    local _dataset _snapshot _date

    _dataset=${1}
    _snapshot=${2}

    if [ -z "${_snapshot}" ] ; then
        _date=$(date "+%F_%T")
        _snapshot="ioc-${_date}"
    fi

    zfs snapshot -r ${_dataset}@${_snapshot}
}

__snapremove () {
    local _dataset _snapshot _snapshots _snap

    _dataset=${1}
    _snapshot=${2}

    if [ ${_snapshot} = "ALL" ] ; then
        # When removing ALL@ALL we get ${pool}/iocage/jails as the dataset and
        # have to look one level deeper to find snapshots of the jails.
        # We don't want to spam the user with messages from zfs about clones, so
        # avoid them by removing snapshots with clones from the list.
        if [ ${_dataset} = ${pool}/iocage/jails ] ; then
            _snapshots=$(zfs list -Hrd2 -t snapshot -o name,clones ${_dataset} \
                         | awk 'NF == 1')
        else
            _snapshots=$(zfs list -Hrd1 -t snapshot -o name,clones ${_dataset} \
                         | awk 'NF == 1')
        fi
        for _snap in ${_snapshots} ; do
            zfs destroy -r ${_snap}
        done
    else
        # It's very tricky to do the clone check here without breaking the
        # secret special ability to specify ranges and lists of snapshots.
        __info "Removing snapshot: @${_snapshot}"
        zfs destroy -r ${_dataset}@${_snapshot}
    fi
}

__snaplist () {
    local _dataset _snapshots _snap _snapshot _creation _used _referenced

    _dataset=${1}

    _snapshots=$(zfs list -Hrd1 -t snapshot -o name ${_dataset})

    {
        printf "%s^%s^%s^%s\n" "NAME" "CREATED" "RSIZE" "USED"

        for _snap in ${_snapshots} ; do
            _snapshot=${_snap#*@}
            _creation=$(__get_dataset_zfs_prop creation ${_snap})
            _used=$(__get_dataset_zfs_prop used ${_snap})
            _referenced=$(__get_dataset_zfs_prop referenced ${_snap})

            printf "%s^%s^%s^%s\n" \
                   "@${_snapshot}" "${_creation}" "${_referenced}" "${_used}"
        done
    } | column -ts^
}

__rollback () {
    local _dataset _snapshot _fs_list _fs

    _dataset=${1}
    _snapshot=${2}

    _fs_list=$(zfs list -Hro name ${_dataset})
    for _fs in ${_fs_list} ; do
        __info "Rolling back to ${_fs}@${_snapshot}"
        zfs rollback -r ${_fs}@${_snapshot}
    done
}

__promote () {
    local _dataset _fs_list _fs _origin

    _dataset=${1}

    _fs_list=$(zfs list -Hro name ${_dataset})

    for _fs in ${_fs_list} ; do
        _origin=$(__get_dataset_zfs_prop origin ${_fs})

        if [ "${_origin}" != "-" ] ; then
            __info "Promoting filesystem: ${_fs}"
            zfs promote ${_fs}
        else
            __info "Filesystem ${_fs} is not a clone"
        fi
    done
}
