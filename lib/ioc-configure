#!/bin/sh

# Configure jail properties --------------------------------------------
__configure_jail () {
    local _generate _dataset _source _clone _CONF _prop_name _value

    if [ "${1}" == "generate" ] ; then
        _generate=1
        _source=${2}
    else
        _generate=0
        _dataset=${1}
        _source=${2}
    fi

    if [ -z "${_source}" ] ; then
        _clone=0
    else
        _clone=1
    fi

    _CONF="${CONF_NET}
           ${CONF_JAIL}
           ${CONF_RCTL}
           ${CONF_CUSTOM}
           ${CONF_SYNC}
           ${CONF_FTP}"

    # Configure the iocage properties for the jail.
    for _prop_name in ${_CONF} ; do

        # Overrides of .defaults or source jail for certain properties.
        case ${_prop_name} in

            # These properties are unique for each jail so the user's .defaults
            # or the source jail's configured value will never be used. Instead
            # use the global auto-generated values, or the values given on the
            # command line.
            "tag");&
            "jail_zfs_dataset");&
            "hostname"|"host_hostname"|"host_hostuuid")
                eval _value=\$${_prop_name}
                ;;

            # Unless we're cloning, use the current global type value.
            "type")
                if [ ${_clone} -eq 0 ] ; then
                    _value=${type}
                fi
                ;;

            # If we're cloning, assume we don't want the clone to be a template.
            "template")
                if [ ${_clone} -eq 1 ] ; then
                    _value="no"
                fi
                ;;

            # ip4_addr might be autogenerated or it might be set on the command
            # line. We have a helper to figure that out for us. We must catch
            # the error here because an error in the subshell doesn't abort
            # this shell.
            "ip4_addr")
                _value=$(__sub_autoip4 "${ip4_addr}") ||
                    __fatal_error "Failed to set automatic IPv4 address."
                ;;

            # The remaining overrides specified on the command line are caught
            # here. Using the iocset_* variant ensures we aren't overriding the
            # user's .defaults or the source jail's settings with the hardcoded
            # global ones.
            *)
                eval _value=\$iocset_${_prop_name}
                ;;

        esac

        # If we haven't set a value yet, use either the user's .defaults
        # preference or the value from the source jail.
        if [ ${_clone} -eq 0 ] ; then
            : ${_value:=$(__get_default_prop ${_prop_name})}
        else
            : ${_value:=$(__get_dataset_ioc_prop ${_prop_name} ${_source})}
        fi

        # Sanity check
        __require_not_empty "${_value}" \
                            "Empty value for ${_prop_name} is not allowed."

        # Do something with the value.
        if [ ${_generate} -eq 1 ] ; then
            echo -n "-o org.freebsd.iocage:${_prop_name}=\"${_value}\" "
        else
            echo "** ${_prop_name}=${_value}"
            __set_dataset_ioc_prop ${_prop_name}="${_value}" ${_dataset}
        fi

        unset _value

    done

    # Configure the ZFS properties for the jail.
    for _prop_name in ${CONF_ZFS} ; do

        # Try to get any overrides from the command line for configurable
        # properties. Any other properties are read-only so we skip to the next
        # configuration property.
        case ${_prop_name} in

            # These are the configurable properties. We read the iocset_*
            # variant so the user's .defaults or the source jails's
            # configuration are not ignored.
            "compression");&
            "quota");&
            "dedup");&
            "reservation")
                eval _value=\$iocset_${_prop_name}
                ;;

            # The rest are read-only, there's nothing to configure.
            *)
                continue
                ;;
        esac

        # If we haven't set a value yet, use either the user's .defaults
        # preference or the value from the source jail.
        if [ ${_clone} -eq 0 ] ; then
            : ${_value:=$(__get_default_prop ${_prop_name})}
        else
            : ${_value:=$(__get_dataset_zfs_prop ${_prop_name} ${_source})}
        fi

        # Sanity check
        __require_not_empty "${_value}" \
                            "Empty value for ${_prop_name} is not allowed."

        # Do something with the value.
        if [ ${_generate} -eq 1 ] ; then
            echo -n "-o ${_prop_name}=\"${_value}\" "
        else
            echo "** ${_prop_name}=${_value}"
            __set_dataset_zfs_prop ${_prop_name}="${_value}" ${_dataset}
        fi

        unset _value

    done
}

__jail_rc_conf () {
    cat << EOT

cron_flags="${cron_flags} -J 15"

# Disable Sendmail by default
sendmail_enable="NONE"
sendmail_submit_enable="NO"
sendmail_outbound_enable="NO"
sendmail_msp_queue_enable="NO"

# Run secure syslog
syslogd_flags="-c -ss"

# Enable IPv6
ipv6_activate_all_interfaces="YES"
EOT
}

__jail_fstab () {
    cat << EOT
# This is the filesystem table for your jail's additional mounts.
# The syntax of this file is described in fstab(5) with one exception:
# You may use %jailroot% in this file and it will be expanded at runtime
# to the path of the jail's root filesystem.
#
# Example:
# /content/shared       %jailroot%/content/shared       nullfs  ro      0 0
# /content/www0         %jailroot%/content/www0         nullfs  rw      0 0

# Device                Mountpoint                      FSType  Options D P#
EOT
}

# This is mostly for pkg autoinstall.
__resolv_conf () {
    local _dataset _resolver _resolver_default

    _dataset=${1}

    _resolver=$(__get_dataset_ioc_prop resolver ${_dataset})

    case "${_resolver}" in
        "copy")
            _mountpoint=$(__get_dataset_zfs_prop mountpoint ${_dataset})
            cp /etc/resolv.conf ${_mountpoint}/root/etc/resolv.conf
            ;;

        "none")
            ;;

        *)
            _mountpoint=$(__get_dataset_zfs_prop mountpoint ${_dataset})
            echo "${_resolver}" | tr ';' '\n' \
                > ${_mountpoint}/root/etc/resolv.conf
            ;;
    esac
}

__pkg_install () {
    local _dataset _mountpoint _pkglist

    _dataset=${1}

    if [ -e "${pkglist}" ] ; then
        _mountpoint=$(__get_dataset_zfs_prop mountpoint ${_dataset})
        _pkglist=$(grep -v ^# "${pkglist}")
        __info "Installing extra packages..."
        pkg -c ${_mountpoint}/root install -qy ${_pkglist} ||
            __error "Installing packages failed. Continuing."
    fi
}

__reset_jail_props () {
    local _dataset

    _dataset=${1}

    #
    # The following variables are intentionally not locals!
    #

    # Overriding autogenerated globals
    uuid=$(__get_dataset_ioc_prop host_hostuuid ${_dataset})
    type=$(__get_dataset_ioc_prop type ${_dataset})
    tag=$(__get_dataset_ioc_prop tag ${_dataset})
    jail_zfs_dataset=$(__get_dataset_ioc_prop jail_zfs_dataset ${_dataset})
    jail_zfs_pool=$(__get_dataset_ioc_prop jail_zfs_pool ${_dataset})

    # Overriding user .defaults
    iocset_vnet0_mac=$(__get_dataset_ioc_prop vnet0_mac ${_dataset})
    iocset_vnet1_mac=$(__get_dataset_ioc_prop vnet1_mac ${_dataset})
    iocset_vnet2_mac=$(__get_dataset_ioc_prop vnet2_mac ${_dataset})
    iocset_vnet3_mac=$(__get_dataset_ioc_prop vnet3_mac ${_dataset})
    iocset_release=$(__get_dataset_ioc_prop release ${_dataset})
    iocset_hack88=$(__get_dataset_ioc_prop hack88 ${_dataset})
    iocset_resolver=$(__get_dataset_ioc_prop resolver ${_dataset})
    iocset_ip4_autostart=$(__get_dataset_ioc_prop ip4_autostart ${_dataset})
    iocset_ip4_autoend=$(__get_dataset_ioc_prop ip4_autoend ${_dataset})

    __configure_jail ${_dataset}
}

__reset_jail_props_all () {
    local _jails _jail

    _jails=$(__find_jail ALL)

    for _jail in ${_jails} ; do
       __reset_jail_props ${_jail}
    done
}
